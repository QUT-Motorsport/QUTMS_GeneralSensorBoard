
sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003450  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003664  08003664  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003664  08003664  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003664  08003664  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003668  08003668  00013668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800366c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  080036dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080036dc  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000749b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015d1  00000000  00000000  00027533  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000738  00000000  00000000  00028b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  00029240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186bc  00000000  00000000  000298e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f04  00000000  00000000  00041f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008be9b  00000000  00000000  00048ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d4d3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c10  00000000  00000000  000d4db8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034f8 	.word	0x080034f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080034f8 	.word	0x080034f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_fdiv>:
 8000230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000232:	4657      	mov	r7, sl
 8000234:	464e      	mov	r6, r9
 8000236:	4645      	mov	r5, r8
 8000238:	46de      	mov	lr, fp
 800023a:	0244      	lsls	r4, r0, #9
 800023c:	b5e0      	push	{r5, r6, r7, lr}
 800023e:	0046      	lsls	r6, r0, #1
 8000240:	4688      	mov	r8, r1
 8000242:	0a64      	lsrs	r4, r4, #9
 8000244:	0e36      	lsrs	r6, r6, #24
 8000246:	0fc7      	lsrs	r7, r0, #31
 8000248:	2e00      	cmp	r6, #0
 800024a:	d063      	beq.n	8000314 <__aeabi_fdiv+0xe4>
 800024c:	2eff      	cmp	r6, #255	; 0xff
 800024e:	d024      	beq.n	800029a <__aeabi_fdiv+0x6a>
 8000250:	2380      	movs	r3, #128	; 0x80
 8000252:	00e4      	lsls	r4, r4, #3
 8000254:	04db      	lsls	r3, r3, #19
 8000256:	431c      	orrs	r4, r3
 8000258:	2300      	movs	r3, #0
 800025a:	4699      	mov	r9, r3
 800025c:	469b      	mov	fp, r3
 800025e:	3e7f      	subs	r6, #127	; 0x7f
 8000260:	4643      	mov	r3, r8
 8000262:	4642      	mov	r2, r8
 8000264:	025d      	lsls	r5, r3, #9
 8000266:	0fd2      	lsrs	r2, r2, #31
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	0a6d      	lsrs	r5, r5, #9
 800026c:	0e1b      	lsrs	r3, r3, #24
 800026e:	4690      	mov	r8, r2
 8000270:	4692      	mov	sl, r2
 8000272:	d065      	beq.n	8000340 <__aeabi_fdiv+0x110>
 8000274:	2bff      	cmp	r3, #255	; 0xff
 8000276:	d055      	beq.n	8000324 <__aeabi_fdiv+0xf4>
 8000278:	2280      	movs	r2, #128	; 0x80
 800027a:	2100      	movs	r1, #0
 800027c:	00ed      	lsls	r5, r5, #3
 800027e:	04d2      	lsls	r2, r2, #19
 8000280:	3b7f      	subs	r3, #127	; 0x7f
 8000282:	4315      	orrs	r5, r2
 8000284:	1af6      	subs	r6, r6, r3
 8000286:	4643      	mov	r3, r8
 8000288:	464a      	mov	r2, r9
 800028a:	407b      	eors	r3, r7
 800028c:	2a0f      	cmp	r2, #15
 800028e:	d900      	bls.n	8000292 <__aeabi_fdiv+0x62>
 8000290:	e08d      	b.n	80003ae <__aeabi_fdiv+0x17e>
 8000292:	486d      	ldr	r0, [pc, #436]	; (8000448 <__aeabi_fdiv+0x218>)
 8000294:	0092      	lsls	r2, r2, #2
 8000296:	5882      	ldr	r2, [r0, r2]
 8000298:	4697      	mov	pc, r2
 800029a:	2c00      	cmp	r4, #0
 800029c:	d154      	bne.n	8000348 <__aeabi_fdiv+0x118>
 800029e:	2308      	movs	r3, #8
 80002a0:	4699      	mov	r9, r3
 80002a2:	3b06      	subs	r3, #6
 80002a4:	26ff      	movs	r6, #255	; 0xff
 80002a6:	469b      	mov	fp, r3
 80002a8:	e7da      	b.n	8000260 <__aeabi_fdiv+0x30>
 80002aa:	2500      	movs	r5, #0
 80002ac:	4653      	mov	r3, sl
 80002ae:	2902      	cmp	r1, #2
 80002b0:	d01b      	beq.n	80002ea <__aeabi_fdiv+0xba>
 80002b2:	2903      	cmp	r1, #3
 80002b4:	d100      	bne.n	80002b8 <__aeabi_fdiv+0x88>
 80002b6:	e0bf      	b.n	8000438 <__aeabi_fdiv+0x208>
 80002b8:	2901      	cmp	r1, #1
 80002ba:	d028      	beq.n	800030e <__aeabi_fdiv+0xde>
 80002bc:	0030      	movs	r0, r6
 80002be:	307f      	adds	r0, #127	; 0x7f
 80002c0:	2800      	cmp	r0, #0
 80002c2:	dd20      	ble.n	8000306 <__aeabi_fdiv+0xd6>
 80002c4:	076a      	lsls	r2, r5, #29
 80002c6:	d004      	beq.n	80002d2 <__aeabi_fdiv+0xa2>
 80002c8:	220f      	movs	r2, #15
 80002ca:	402a      	ands	r2, r5
 80002cc:	2a04      	cmp	r2, #4
 80002ce:	d000      	beq.n	80002d2 <__aeabi_fdiv+0xa2>
 80002d0:	3504      	adds	r5, #4
 80002d2:	012a      	lsls	r2, r5, #4
 80002d4:	d503      	bpl.n	80002de <__aeabi_fdiv+0xae>
 80002d6:	0030      	movs	r0, r6
 80002d8:	4a5c      	ldr	r2, [pc, #368]	; (800044c <__aeabi_fdiv+0x21c>)
 80002da:	3080      	adds	r0, #128	; 0x80
 80002dc:	4015      	ands	r5, r2
 80002de:	28fe      	cmp	r0, #254	; 0xfe
 80002e0:	dc03      	bgt.n	80002ea <__aeabi_fdiv+0xba>
 80002e2:	01ac      	lsls	r4, r5, #6
 80002e4:	0a64      	lsrs	r4, r4, #9
 80002e6:	b2c2      	uxtb	r2, r0
 80002e8:	e001      	b.n	80002ee <__aeabi_fdiv+0xbe>
 80002ea:	22ff      	movs	r2, #255	; 0xff
 80002ec:	2400      	movs	r4, #0
 80002ee:	0264      	lsls	r4, r4, #9
 80002f0:	05d2      	lsls	r2, r2, #23
 80002f2:	0a60      	lsrs	r0, r4, #9
 80002f4:	07db      	lsls	r3, r3, #31
 80002f6:	4310      	orrs	r0, r2
 80002f8:	4318      	orrs	r0, r3
 80002fa:	bc3c      	pop	{r2, r3, r4, r5}
 80002fc:	4690      	mov	r8, r2
 80002fe:	4699      	mov	r9, r3
 8000300:	46a2      	mov	sl, r4
 8000302:	46ab      	mov	fp, r5
 8000304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000306:	2201      	movs	r2, #1
 8000308:	1a10      	subs	r0, r2, r0
 800030a:	281b      	cmp	r0, #27
 800030c:	dd7c      	ble.n	8000408 <__aeabi_fdiv+0x1d8>
 800030e:	2200      	movs	r2, #0
 8000310:	2400      	movs	r4, #0
 8000312:	e7ec      	b.n	80002ee <__aeabi_fdiv+0xbe>
 8000314:	2c00      	cmp	r4, #0
 8000316:	d11d      	bne.n	8000354 <__aeabi_fdiv+0x124>
 8000318:	2304      	movs	r3, #4
 800031a:	4699      	mov	r9, r3
 800031c:	3b03      	subs	r3, #3
 800031e:	2600      	movs	r6, #0
 8000320:	469b      	mov	fp, r3
 8000322:	e79d      	b.n	8000260 <__aeabi_fdiv+0x30>
 8000324:	3eff      	subs	r6, #255	; 0xff
 8000326:	2d00      	cmp	r5, #0
 8000328:	d120      	bne.n	800036c <__aeabi_fdiv+0x13c>
 800032a:	2102      	movs	r1, #2
 800032c:	4643      	mov	r3, r8
 800032e:	464a      	mov	r2, r9
 8000330:	407b      	eors	r3, r7
 8000332:	430a      	orrs	r2, r1
 8000334:	2a0f      	cmp	r2, #15
 8000336:	d8d8      	bhi.n	80002ea <__aeabi_fdiv+0xba>
 8000338:	4845      	ldr	r0, [pc, #276]	; (8000450 <__aeabi_fdiv+0x220>)
 800033a:	0092      	lsls	r2, r2, #2
 800033c:	5882      	ldr	r2, [r0, r2]
 800033e:	4697      	mov	pc, r2
 8000340:	2d00      	cmp	r5, #0
 8000342:	d119      	bne.n	8000378 <__aeabi_fdiv+0x148>
 8000344:	2101      	movs	r1, #1
 8000346:	e7f1      	b.n	800032c <__aeabi_fdiv+0xfc>
 8000348:	230c      	movs	r3, #12
 800034a:	4699      	mov	r9, r3
 800034c:	3b09      	subs	r3, #9
 800034e:	26ff      	movs	r6, #255	; 0xff
 8000350:	469b      	mov	fp, r3
 8000352:	e785      	b.n	8000260 <__aeabi_fdiv+0x30>
 8000354:	0020      	movs	r0, r4
 8000356:	f000 fa19 	bl	800078c <__clzsi2>
 800035a:	2676      	movs	r6, #118	; 0x76
 800035c:	1f43      	subs	r3, r0, #5
 800035e:	409c      	lsls	r4, r3
 8000360:	2300      	movs	r3, #0
 8000362:	4276      	negs	r6, r6
 8000364:	1a36      	subs	r6, r6, r0
 8000366:	4699      	mov	r9, r3
 8000368:	469b      	mov	fp, r3
 800036a:	e779      	b.n	8000260 <__aeabi_fdiv+0x30>
 800036c:	464a      	mov	r2, r9
 800036e:	2303      	movs	r3, #3
 8000370:	431a      	orrs	r2, r3
 8000372:	4691      	mov	r9, r2
 8000374:	2103      	movs	r1, #3
 8000376:	e786      	b.n	8000286 <__aeabi_fdiv+0x56>
 8000378:	0028      	movs	r0, r5
 800037a:	f000 fa07 	bl	800078c <__clzsi2>
 800037e:	1f43      	subs	r3, r0, #5
 8000380:	1836      	adds	r6, r6, r0
 8000382:	409d      	lsls	r5, r3
 8000384:	3676      	adds	r6, #118	; 0x76
 8000386:	2100      	movs	r1, #0
 8000388:	e77d      	b.n	8000286 <__aeabi_fdiv+0x56>
 800038a:	2480      	movs	r4, #128	; 0x80
 800038c:	2300      	movs	r3, #0
 800038e:	03e4      	lsls	r4, r4, #15
 8000390:	22ff      	movs	r2, #255	; 0xff
 8000392:	e7ac      	b.n	80002ee <__aeabi_fdiv+0xbe>
 8000394:	2500      	movs	r5, #0
 8000396:	2380      	movs	r3, #128	; 0x80
 8000398:	03db      	lsls	r3, r3, #15
 800039a:	421c      	tst	r4, r3
 800039c:	d028      	beq.n	80003f0 <__aeabi_fdiv+0x1c0>
 800039e:	421d      	tst	r5, r3
 80003a0:	d126      	bne.n	80003f0 <__aeabi_fdiv+0x1c0>
 80003a2:	432b      	orrs	r3, r5
 80003a4:	025c      	lsls	r4, r3, #9
 80003a6:	0a64      	lsrs	r4, r4, #9
 80003a8:	4643      	mov	r3, r8
 80003aa:	22ff      	movs	r2, #255	; 0xff
 80003ac:	e79f      	b.n	80002ee <__aeabi_fdiv+0xbe>
 80003ae:	0162      	lsls	r2, r4, #5
 80003b0:	016c      	lsls	r4, r5, #5
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d224      	bcs.n	8000400 <__aeabi_fdiv+0x1d0>
 80003b6:	211b      	movs	r1, #27
 80003b8:	2500      	movs	r5, #0
 80003ba:	3e01      	subs	r6, #1
 80003bc:	2701      	movs	r7, #1
 80003be:	0010      	movs	r0, r2
 80003c0:	006d      	lsls	r5, r5, #1
 80003c2:	0052      	lsls	r2, r2, #1
 80003c4:	2800      	cmp	r0, #0
 80003c6:	db01      	blt.n	80003cc <__aeabi_fdiv+0x19c>
 80003c8:	4294      	cmp	r4, r2
 80003ca:	d801      	bhi.n	80003d0 <__aeabi_fdiv+0x1a0>
 80003cc:	1b12      	subs	r2, r2, r4
 80003ce:	433d      	orrs	r5, r7
 80003d0:	3901      	subs	r1, #1
 80003d2:	2900      	cmp	r1, #0
 80003d4:	d1f3      	bne.n	80003be <__aeabi_fdiv+0x18e>
 80003d6:	0014      	movs	r4, r2
 80003d8:	1e62      	subs	r2, r4, #1
 80003da:	4194      	sbcs	r4, r2
 80003dc:	4325      	orrs	r5, r4
 80003de:	e76d      	b.n	80002bc <__aeabi_fdiv+0x8c>
 80003e0:	46ba      	mov	sl, r7
 80003e2:	4659      	mov	r1, fp
 80003e4:	0025      	movs	r5, r4
 80003e6:	4653      	mov	r3, sl
 80003e8:	2902      	cmp	r1, #2
 80003ea:	d000      	beq.n	80003ee <__aeabi_fdiv+0x1be>
 80003ec:	e761      	b.n	80002b2 <__aeabi_fdiv+0x82>
 80003ee:	e77c      	b.n	80002ea <__aeabi_fdiv+0xba>
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	03db      	lsls	r3, r3, #15
 80003f4:	431c      	orrs	r4, r3
 80003f6:	0264      	lsls	r4, r4, #9
 80003f8:	0a64      	lsrs	r4, r4, #9
 80003fa:	003b      	movs	r3, r7
 80003fc:	22ff      	movs	r2, #255	; 0xff
 80003fe:	e776      	b.n	80002ee <__aeabi_fdiv+0xbe>
 8000400:	1b12      	subs	r2, r2, r4
 8000402:	211a      	movs	r1, #26
 8000404:	2501      	movs	r5, #1
 8000406:	e7d9      	b.n	80003bc <__aeabi_fdiv+0x18c>
 8000408:	369e      	adds	r6, #158	; 0x9e
 800040a:	002a      	movs	r2, r5
 800040c:	40b5      	lsls	r5, r6
 800040e:	002c      	movs	r4, r5
 8000410:	40c2      	lsrs	r2, r0
 8000412:	1e65      	subs	r5, r4, #1
 8000414:	41ac      	sbcs	r4, r5
 8000416:	4314      	orrs	r4, r2
 8000418:	0762      	lsls	r2, r4, #29
 800041a:	d004      	beq.n	8000426 <__aeabi_fdiv+0x1f6>
 800041c:	220f      	movs	r2, #15
 800041e:	4022      	ands	r2, r4
 8000420:	2a04      	cmp	r2, #4
 8000422:	d000      	beq.n	8000426 <__aeabi_fdiv+0x1f6>
 8000424:	3404      	adds	r4, #4
 8000426:	0162      	lsls	r2, r4, #5
 8000428:	d403      	bmi.n	8000432 <__aeabi_fdiv+0x202>
 800042a:	01a4      	lsls	r4, r4, #6
 800042c:	0a64      	lsrs	r4, r4, #9
 800042e:	2200      	movs	r2, #0
 8000430:	e75d      	b.n	80002ee <__aeabi_fdiv+0xbe>
 8000432:	2201      	movs	r2, #1
 8000434:	2400      	movs	r4, #0
 8000436:	e75a      	b.n	80002ee <__aeabi_fdiv+0xbe>
 8000438:	2480      	movs	r4, #128	; 0x80
 800043a:	03e4      	lsls	r4, r4, #15
 800043c:	432c      	orrs	r4, r5
 800043e:	0264      	lsls	r4, r4, #9
 8000440:	0a64      	lsrs	r4, r4, #9
 8000442:	22ff      	movs	r2, #255	; 0xff
 8000444:	e753      	b.n	80002ee <__aeabi_fdiv+0xbe>
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	08003558 	.word	0x08003558
 800044c:	f7ffffff 	.word	0xf7ffffff
 8000450:	08003598 	.word	0x08003598

08000454 <__aeabi_fmul>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	464e      	mov	r6, r9
 8000458:	4657      	mov	r7, sl
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0243      	lsls	r3, r0, #9
 8000462:	0a5b      	lsrs	r3, r3, #9
 8000464:	0045      	lsls	r5, r0, #1
 8000466:	b083      	sub	sp, #12
 8000468:	1c0f      	adds	r7, r1, #0
 800046a:	4699      	mov	r9, r3
 800046c:	0e2d      	lsrs	r5, r5, #24
 800046e:	0fc6      	lsrs	r6, r0, #31
 8000470:	2d00      	cmp	r5, #0
 8000472:	d057      	beq.n	8000524 <__aeabi_fmul+0xd0>
 8000474:	2dff      	cmp	r5, #255	; 0xff
 8000476:	d024      	beq.n	80004c2 <__aeabi_fmul+0x6e>
 8000478:	2080      	movs	r0, #128	; 0x80
 800047a:	00db      	lsls	r3, r3, #3
 800047c:	04c0      	lsls	r0, r0, #19
 800047e:	4318      	orrs	r0, r3
 8000480:	2300      	movs	r3, #0
 8000482:	4681      	mov	r9, r0
 8000484:	469a      	mov	sl, r3
 8000486:	469b      	mov	fp, r3
 8000488:	3d7f      	subs	r5, #127	; 0x7f
 800048a:	027c      	lsls	r4, r7, #9
 800048c:	007a      	lsls	r2, r7, #1
 800048e:	0ffb      	lsrs	r3, r7, #31
 8000490:	0a64      	lsrs	r4, r4, #9
 8000492:	0e12      	lsrs	r2, r2, #24
 8000494:	4698      	mov	r8, r3
 8000496:	d023      	beq.n	80004e0 <__aeabi_fmul+0x8c>
 8000498:	2aff      	cmp	r2, #255	; 0xff
 800049a:	d04b      	beq.n	8000534 <__aeabi_fmul+0xe0>
 800049c:	00e3      	lsls	r3, r4, #3
 800049e:	2480      	movs	r4, #128	; 0x80
 80004a0:	2000      	movs	r0, #0
 80004a2:	04e4      	lsls	r4, r4, #19
 80004a4:	3a7f      	subs	r2, #127	; 0x7f
 80004a6:	431c      	orrs	r4, r3
 80004a8:	18ad      	adds	r5, r5, r2
 80004aa:	1c6b      	adds	r3, r5, #1
 80004ac:	4647      	mov	r7, r8
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	4653      	mov	r3, sl
 80004b2:	4077      	eors	r7, r6
 80004b4:	003a      	movs	r2, r7
 80004b6:	2b0f      	cmp	r3, #15
 80004b8:	d848      	bhi.n	800054c <__aeabi_fmul+0xf8>
 80004ba:	497d      	ldr	r1, [pc, #500]	; (80006b0 <__aeabi_fmul+0x25c>)
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	58cb      	ldr	r3, [r1, r3]
 80004c0:	469f      	mov	pc, r3
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d000      	beq.n	80004c8 <__aeabi_fmul+0x74>
 80004c6:	e085      	b.n	80005d4 <__aeabi_fmul+0x180>
 80004c8:	3308      	adds	r3, #8
 80004ca:	469a      	mov	sl, r3
 80004cc:	3b06      	subs	r3, #6
 80004ce:	469b      	mov	fp, r3
 80004d0:	027c      	lsls	r4, r7, #9
 80004d2:	007a      	lsls	r2, r7, #1
 80004d4:	0ffb      	lsrs	r3, r7, #31
 80004d6:	25ff      	movs	r5, #255	; 0xff
 80004d8:	0a64      	lsrs	r4, r4, #9
 80004da:	0e12      	lsrs	r2, r2, #24
 80004dc:	4698      	mov	r8, r3
 80004de:	d1db      	bne.n	8000498 <__aeabi_fmul+0x44>
 80004e0:	2c00      	cmp	r4, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_fmul+0x92>
 80004e4:	e090      	b.n	8000608 <__aeabi_fmul+0x1b4>
 80004e6:	4652      	mov	r2, sl
 80004e8:	2301      	movs	r3, #1
 80004ea:	431a      	orrs	r2, r3
 80004ec:	4692      	mov	sl, r2
 80004ee:	2001      	movs	r0, #1
 80004f0:	e7db      	b.n	80004aa <__aeabi_fmul+0x56>
 80004f2:	464c      	mov	r4, r9
 80004f4:	4658      	mov	r0, fp
 80004f6:	0017      	movs	r7, r2
 80004f8:	2802      	cmp	r0, #2
 80004fa:	d024      	beq.n	8000546 <__aeabi_fmul+0xf2>
 80004fc:	2803      	cmp	r0, #3
 80004fe:	d100      	bne.n	8000502 <__aeabi_fmul+0xae>
 8000500:	e0cf      	b.n	80006a2 <__aeabi_fmul+0x24e>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	2801      	cmp	r0, #1
 8000508:	d14d      	bne.n	80005a6 <__aeabi_fmul+0x152>
 800050a:	0258      	lsls	r0, r3, #9
 800050c:	05d2      	lsls	r2, r2, #23
 800050e:	0a40      	lsrs	r0, r0, #9
 8000510:	07ff      	lsls	r7, r7, #31
 8000512:	4310      	orrs	r0, r2
 8000514:	4338      	orrs	r0, r7
 8000516:	b003      	add	sp, #12
 8000518:	bc3c      	pop	{r2, r3, r4, r5}
 800051a:	4690      	mov	r8, r2
 800051c:	4699      	mov	r9, r3
 800051e:	46a2      	mov	sl, r4
 8000520:	46ab      	mov	fp, r5
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	2b00      	cmp	r3, #0
 8000526:	d15b      	bne.n	80005e0 <__aeabi_fmul+0x18c>
 8000528:	2304      	movs	r3, #4
 800052a:	469a      	mov	sl, r3
 800052c:	3b03      	subs	r3, #3
 800052e:	2500      	movs	r5, #0
 8000530:	469b      	mov	fp, r3
 8000532:	e7aa      	b.n	800048a <__aeabi_fmul+0x36>
 8000534:	35ff      	adds	r5, #255	; 0xff
 8000536:	2c00      	cmp	r4, #0
 8000538:	d160      	bne.n	80005fc <__aeabi_fmul+0x1a8>
 800053a:	4652      	mov	r2, sl
 800053c:	2302      	movs	r3, #2
 800053e:	431a      	orrs	r2, r3
 8000540:	4692      	mov	sl, r2
 8000542:	2002      	movs	r0, #2
 8000544:	e7b1      	b.n	80004aa <__aeabi_fmul+0x56>
 8000546:	22ff      	movs	r2, #255	; 0xff
 8000548:	2300      	movs	r3, #0
 800054a:	e7de      	b.n	800050a <__aeabi_fmul+0xb6>
 800054c:	464b      	mov	r3, r9
 800054e:	0c1b      	lsrs	r3, r3, #16
 8000550:	469c      	mov	ip, r3
 8000552:	464b      	mov	r3, r9
 8000554:	0426      	lsls	r6, r4, #16
 8000556:	0c36      	lsrs	r6, r6, #16
 8000558:	0418      	lsls	r0, r3, #16
 800055a:	4661      	mov	r1, ip
 800055c:	0033      	movs	r3, r6
 800055e:	0c22      	lsrs	r2, r4, #16
 8000560:	4664      	mov	r4, ip
 8000562:	0c00      	lsrs	r0, r0, #16
 8000564:	4343      	muls	r3, r0
 8000566:	434e      	muls	r6, r1
 8000568:	4350      	muls	r0, r2
 800056a:	4354      	muls	r4, r2
 800056c:	1980      	adds	r0, r0, r6
 800056e:	0c1a      	lsrs	r2, r3, #16
 8000570:	1812      	adds	r2, r2, r0
 8000572:	4296      	cmp	r6, r2
 8000574:	d903      	bls.n	800057e <__aeabi_fmul+0x12a>
 8000576:	2180      	movs	r1, #128	; 0x80
 8000578:	0249      	lsls	r1, r1, #9
 800057a:	468c      	mov	ip, r1
 800057c:	4464      	add	r4, ip
 800057e:	041b      	lsls	r3, r3, #16
 8000580:	0c1b      	lsrs	r3, r3, #16
 8000582:	0410      	lsls	r0, r2, #16
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0183      	lsls	r3, r0, #6
 8000588:	1e5e      	subs	r6, r3, #1
 800058a:	41b3      	sbcs	r3, r6
 800058c:	0e80      	lsrs	r0, r0, #26
 800058e:	4318      	orrs	r0, r3
 8000590:	0c13      	lsrs	r3, r2, #16
 8000592:	191b      	adds	r3, r3, r4
 8000594:	019b      	lsls	r3, r3, #6
 8000596:	4303      	orrs	r3, r0
 8000598:	001c      	movs	r4, r3
 800059a:	0123      	lsls	r3, r4, #4
 800059c:	d579      	bpl.n	8000692 <__aeabi_fmul+0x23e>
 800059e:	2301      	movs	r3, #1
 80005a0:	0862      	lsrs	r2, r4, #1
 80005a2:	401c      	ands	r4, r3
 80005a4:	4314      	orrs	r4, r2
 80005a6:	9a01      	ldr	r2, [sp, #4]
 80005a8:	327f      	adds	r2, #127	; 0x7f
 80005aa:	2a00      	cmp	r2, #0
 80005ac:	dd4d      	ble.n	800064a <__aeabi_fmul+0x1f6>
 80005ae:	0763      	lsls	r3, r4, #29
 80005b0:	d004      	beq.n	80005bc <__aeabi_fmul+0x168>
 80005b2:	230f      	movs	r3, #15
 80005b4:	4023      	ands	r3, r4
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d000      	beq.n	80005bc <__aeabi_fmul+0x168>
 80005ba:	3404      	adds	r4, #4
 80005bc:	0123      	lsls	r3, r4, #4
 80005be:	d503      	bpl.n	80005c8 <__aeabi_fmul+0x174>
 80005c0:	4b3c      	ldr	r3, [pc, #240]	; (80006b4 <__aeabi_fmul+0x260>)
 80005c2:	9a01      	ldr	r2, [sp, #4]
 80005c4:	401c      	ands	r4, r3
 80005c6:	3280      	adds	r2, #128	; 0x80
 80005c8:	2afe      	cmp	r2, #254	; 0xfe
 80005ca:	dcbc      	bgt.n	8000546 <__aeabi_fmul+0xf2>
 80005cc:	01a3      	lsls	r3, r4, #6
 80005ce:	0a5b      	lsrs	r3, r3, #9
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	e79a      	b.n	800050a <__aeabi_fmul+0xb6>
 80005d4:	230c      	movs	r3, #12
 80005d6:	469a      	mov	sl, r3
 80005d8:	3b09      	subs	r3, #9
 80005da:	25ff      	movs	r5, #255	; 0xff
 80005dc:	469b      	mov	fp, r3
 80005de:	e754      	b.n	800048a <__aeabi_fmul+0x36>
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 f8d3 	bl	800078c <__clzsi2>
 80005e6:	464a      	mov	r2, r9
 80005e8:	1f43      	subs	r3, r0, #5
 80005ea:	2576      	movs	r5, #118	; 0x76
 80005ec:	409a      	lsls	r2, r3
 80005ee:	2300      	movs	r3, #0
 80005f0:	426d      	negs	r5, r5
 80005f2:	4691      	mov	r9, r2
 80005f4:	1a2d      	subs	r5, r5, r0
 80005f6:	469a      	mov	sl, r3
 80005f8:	469b      	mov	fp, r3
 80005fa:	e746      	b.n	800048a <__aeabi_fmul+0x36>
 80005fc:	4652      	mov	r2, sl
 80005fe:	2303      	movs	r3, #3
 8000600:	431a      	orrs	r2, r3
 8000602:	4692      	mov	sl, r2
 8000604:	2003      	movs	r0, #3
 8000606:	e750      	b.n	80004aa <__aeabi_fmul+0x56>
 8000608:	0020      	movs	r0, r4
 800060a:	f000 f8bf 	bl	800078c <__clzsi2>
 800060e:	1f43      	subs	r3, r0, #5
 8000610:	1a2d      	subs	r5, r5, r0
 8000612:	409c      	lsls	r4, r3
 8000614:	3d76      	subs	r5, #118	; 0x76
 8000616:	2000      	movs	r0, #0
 8000618:	e747      	b.n	80004aa <__aeabi_fmul+0x56>
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	2700      	movs	r7, #0
 800061e:	03db      	lsls	r3, r3, #15
 8000620:	22ff      	movs	r2, #255	; 0xff
 8000622:	e772      	b.n	800050a <__aeabi_fmul+0xb6>
 8000624:	4642      	mov	r2, r8
 8000626:	e766      	b.n	80004f6 <__aeabi_fmul+0xa2>
 8000628:	464c      	mov	r4, r9
 800062a:	0032      	movs	r2, r6
 800062c:	4658      	mov	r0, fp
 800062e:	e762      	b.n	80004f6 <__aeabi_fmul+0xa2>
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	464a      	mov	r2, r9
 8000634:	03db      	lsls	r3, r3, #15
 8000636:	421a      	tst	r2, r3
 8000638:	d022      	beq.n	8000680 <__aeabi_fmul+0x22c>
 800063a:	421c      	tst	r4, r3
 800063c:	d120      	bne.n	8000680 <__aeabi_fmul+0x22c>
 800063e:	4323      	orrs	r3, r4
 8000640:	025b      	lsls	r3, r3, #9
 8000642:	0a5b      	lsrs	r3, r3, #9
 8000644:	4647      	mov	r7, r8
 8000646:	22ff      	movs	r2, #255	; 0xff
 8000648:	e75f      	b.n	800050a <__aeabi_fmul+0xb6>
 800064a:	2301      	movs	r3, #1
 800064c:	1a9a      	subs	r2, r3, r2
 800064e:	2a1b      	cmp	r2, #27
 8000650:	dc21      	bgt.n	8000696 <__aeabi_fmul+0x242>
 8000652:	0023      	movs	r3, r4
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	40d3      	lsrs	r3, r2
 8000658:	319e      	adds	r1, #158	; 0x9e
 800065a:	408c      	lsls	r4, r1
 800065c:	001a      	movs	r2, r3
 800065e:	0023      	movs	r3, r4
 8000660:	1e5c      	subs	r4, r3, #1
 8000662:	41a3      	sbcs	r3, r4
 8000664:	4313      	orrs	r3, r2
 8000666:	075a      	lsls	r2, r3, #29
 8000668:	d004      	beq.n	8000674 <__aeabi_fmul+0x220>
 800066a:	220f      	movs	r2, #15
 800066c:	401a      	ands	r2, r3
 800066e:	2a04      	cmp	r2, #4
 8000670:	d000      	beq.n	8000674 <__aeabi_fmul+0x220>
 8000672:	3304      	adds	r3, #4
 8000674:	015a      	lsls	r2, r3, #5
 8000676:	d411      	bmi.n	800069c <__aeabi_fmul+0x248>
 8000678:	019b      	lsls	r3, r3, #6
 800067a:	0a5b      	lsrs	r3, r3, #9
 800067c:	2200      	movs	r2, #0
 800067e:	e744      	b.n	800050a <__aeabi_fmul+0xb6>
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	464a      	mov	r2, r9
 8000684:	03db      	lsls	r3, r3, #15
 8000686:	4313      	orrs	r3, r2
 8000688:	025b      	lsls	r3, r3, #9
 800068a:	0a5b      	lsrs	r3, r3, #9
 800068c:	0037      	movs	r7, r6
 800068e:	22ff      	movs	r2, #255	; 0xff
 8000690:	e73b      	b.n	800050a <__aeabi_fmul+0xb6>
 8000692:	9501      	str	r5, [sp, #4]
 8000694:	e787      	b.n	80005a6 <__aeabi_fmul+0x152>
 8000696:	2200      	movs	r2, #0
 8000698:	2300      	movs	r3, #0
 800069a:	e736      	b.n	800050a <__aeabi_fmul+0xb6>
 800069c:	2201      	movs	r2, #1
 800069e:	2300      	movs	r3, #0
 80006a0:	e733      	b.n	800050a <__aeabi_fmul+0xb6>
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	03db      	lsls	r3, r3, #15
 80006a6:	4323      	orrs	r3, r4
 80006a8:	025b      	lsls	r3, r3, #9
 80006aa:	0a5b      	lsrs	r3, r3, #9
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	e72c      	b.n	800050a <__aeabi_fmul+0xb6>
 80006b0:	080035d8 	.word	0x080035d8
 80006b4:	f7ffffff 	.word	0xf7ffffff

080006b8 <__aeabi_f2iz>:
 80006b8:	0241      	lsls	r1, r0, #9
 80006ba:	0042      	lsls	r2, r0, #1
 80006bc:	0fc3      	lsrs	r3, r0, #31
 80006be:	0a49      	lsrs	r1, r1, #9
 80006c0:	0e12      	lsrs	r2, r2, #24
 80006c2:	2000      	movs	r0, #0
 80006c4:	2a7e      	cmp	r2, #126	; 0x7e
 80006c6:	d90d      	bls.n	80006e4 <__aeabi_f2iz+0x2c>
 80006c8:	2a9d      	cmp	r2, #157	; 0x9d
 80006ca:	d80c      	bhi.n	80006e6 <__aeabi_f2iz+0x2e>
 80006cc:	2080      	movs	r0, #128	; 0x80
 80006ce:	0400      	lsls	r0, r0, #16
 80006d0:	4301      	orrs	r1, r0
 80006d2:	2a95      	cmp	r2, #149	; 0x95
 80006d4:	dc0a      	bgt.n	80006ec <__aeabi_f2iz+0x34>
 80006d6:	2096      	movs	r0, #150	; 0x96
 80006d8:	1a82      	subs	r2, r0, r2
 80006da:	40d1      	lsrs	r1, r2
 80006dc:	4248      	negs	r0, r1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_f2iz+0x2c>
 80006e2:	0008      	movs	r0, r1
 80006e4:	4770      	bx	lr
 80006e6:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <__aeabi_f2iz+0x3c>)
 80006e8:	1898      	adds	r0, r3, r2
 80006ea:	e7fb      	b.n	80006e4 <__aeabi_f2iz+0x2c>
 80006ec:	3a96      	subs	r2, #150	; 0x96
 80006ee:	4091      	lsls	r1, r2
 80006f0:	e7f4      	b.n	80006dc <__aeabi_f2iz+0x24>
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	7fffffff 	.word	0x7fffffff

080006f8 <__aeabi_i2f>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d03d      	beq.n	800077a <__aeabi_i2f+0x82>
 80006fe:	17c3      	asrs	r3, r0, #31
 8000700:	18c5      	adds	r5, r0, r3
 8000702:	405d      	eors	r5, r3
 8000704:	0fc4      	lsrs	r4, r0, #31
 8000706:	0028      	movs	r0, r5
 8000708:	f000 f840 	bl	800078c <__clzsi2>
 800070c:	229e      	movs	r2, #158	; 0x9e
 800070e:	1a12      	subs	r2, r2, r0
 8000710:	2a96      	cmp	r2, #150	; 0x96
 8000712:	dc07      	bgt.n	8000724 <__aeabi_i2f+0x2c>
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	2808      	cmp	r0, #8
 8000718:	dd33      	ble.n	8000782 <__aeabi_i2f+0x8a>
 800071a:	3808      	subs	r0, #8
 800071c:	4085      	lsls	r5, r0
 800071e:	0268      	lsls	r0, r5, #9
 8000720:	0a40      	lsrs	r0, r0, #9
 8000722:	e023      	b.n	800076c <__aeabi_i2f+0x74>
 8000724:	2a99      	cmp	r2, #153	; 0x99
 8000726:	dd0b      	ble.n	8000740 <__aeabi_i2f+0x48>
 8000728:	2305      	movs	r3, #5
 800072a:	0029      	movs	r1, r5
 800072c:	1a1b      	subs	r3, r3, r0
 800072e:	40d9      	lsrs	r1, r3
 8000730:	0003      	movs	r3, r0
 8000732:	331b      	adds	r3, #27
 8000734:	409d      	lsls	r5, r3
 8000736:	002b      	movs	r3, r5
 8000738:	1e5d      	subs	r5, r3, #1
 800073a:	41ab      	sbcs	r3, r5
 800073c:	4319      	orrs	r1, r3
 800073e:	000d      	movs	r5, r1
 8000740:	2805      	cmp	r0, #5
 8000742:	dd01      	ble.n	8000748 <__aeabi_i2f+0x50>
 8000744:	1f43      	subs	r3, r0, #5
 8000746:	409d      	lsls	r5, r3
 8000748:	002b      	movs	r3, r5
 800074a:	490f      	ldr	r1, [pc, #60]	; (8000788 <__aeabi_i2f+0x90>)
 800074c:	400b      	ands	r3, r1
 800074e:	076e      	lsls	r6, r5, #29
 8000750:	d009      	beq.n	8000766 <__aeabi_i2f+0x6e>
 8000752:	260f      	movs	r6, #15
 8000754:	4035      	ands	r5, r6
 8000756:	2d04      	cmp	r5, #4
 8000758:	d005      	beq.n	8000766 <__aeabi_i2f+0x6e>
 800075a:	3304      	adds	r3, #4
 800075c:	015d      	lsls	r5, r3, #5
 800075e:	d502      	bpl.n	8000766 <__aeabi_i2f+0x6e>
 8000760:	229f      	movs	r2, #159	; 0x9f
 8000762:	400b      	ands	r3, r1
 8000764:	1a12      	subs	r2, r2, r0
 8000766:	019b      	lsls	r3, r3, #6
 8000768:	0a58      	lsrs	r0, r3, #9
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	0240      	lsls	r0, r0, #9
 800076e:	05d2      	lsls	r2, r2, #23
 8000770:	0a40      	lsrs	r0, r0, #9
 8000772:	07e4      	lsls	r4, r4, #31
 8000774:	4310      	orrs	r0, r2
 8000776:	4320      	orrs	r0, r4
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	2400      	movs	r4, #0
 800077c:	2200      	movs	r2, #0
 800077e:	2000      	movs	r0, #0
 8000780:	e7f4      	b.n	800076c <__aeabi_i2f+0x74>
 8000782:	0268      	lsls	r0, r5, #9
 8000784:	0a40      	lsrs	r0, r0, #9
 8000786:	e7f1      	b.n	800076c <__aeabi_i2f+0x74>
 8000788:	fbffffff 	.word	0xfbffffff

0800078c <__clzsi2>:
 800078c:	211c      	movs	r1, #28
 800078e:	2301      	movs	r3, #1
 8000790:	041b      	lsls	r3, r3, #16
 8000792:	4298      	cmp	r0, r3
 8000794:	d301      	bcc.n	800079a <__clzsi2+0xe>
 8000796:	0c00      	lsrs	r0, r0, #16
 8000798:	3910      	subs	r1, #16
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	4298      	cmp	r0, r3
 800079e:	d301      	bcc.n	80007a4 <__clzsi2+0x18>
 80007a0:	0a00      	lsrs	r0, r0, #8
 80007a2:	3908      	subs	r1, #8
 80007a4:	091b      	lsrs	r3, r3, #4
 80007a6:	4298      	cmp	r0, r3
 80007a8:	d301      	bcc.n	80007ae <__clzsi2+0x22>
 80007aa:	0900      	lsrs	r0, r0, #4
 80007ac:	3904      	subs	r1, #4
 80007ae:	a202      	add	r2, pc, #8	; (adr r2, 80007b8 <__clzsi2+0x2c>)
 80007b0:	5c10      	ldrb	r0, [r2, r0]
 80007b2:	1840      	adds	r0, r0, r1
 80007b4:	4770      	bx	lr
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	02020304 	.word	0x02020304
 80007bc:	01010101 	.word	0x01010101
	...

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	b0a1      	sub	sp, #132	; 0x84
 80007cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f000 fae9 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f893 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f000 f97b 	bl	8000ad0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007da:	f000 f949 	bl	8000a70 <MX_USART1_UART_Init>
  MX_ADC_Init();
 80007de:	f000 f8eb 	bl	80009b8 <MX_ADC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint16_t raw = 0;
 80007e2:	2372      	movs	r3, #114	; 0x72
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	2200      	movs	r2, #0
 80007e8:	801a      	strh	r2, [r3, #0]
  uint16_t max_raw = 4020; //got the numbers from test
 80007ea:	2370      	movs	r3, #112	; 0x70
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	4a3c      	ldr	r2, [pc, #240]	; (80008e0 <main+0x118>)
 80007f0:	801a      	strh	r2, [r3, #0]
  uint16_t min_raw  = 2277;
 80007f2:	236e      	movs	r3, #110	; 0x6e
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	4a3b      	ldr	r2, [pc, #236]	; (80008e4 <main+0x11c>)
 80007f8:	801a      	strh	r2, [r3, #0]
  char msg[100];
  int raw_percent;

  uint16_t max = 0;
 80007fa:	2376      	movs	r3, #118	; 0x76
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	2200      	movs	r2, #0
 8000800:	801a      	strh	r2, [r3, #0]
  uint16_t min = 9999;
 8000802:	2374      	movs	r3, #116	; 0x74
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	4a38      	ldr	r2, [pc, #224]	; (80008e8 <main+0x120>)
 8000808:	801a      	strh	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //read ADC value

	  HAL_ADC_Start(&hadc);
 800080a:	4b38      	ldr	r3, [pc, #224]	; (80008ec <main+0x124>)
 800080c:	0018      	movs	r0, r3
 800080e:	f000 fc8f 	bl	8001130 <HAL_ADC_Start>
	  raw = HAL_ADC_GetValue(&hadc);
 8000812:	4b36      	ldr	r3, [pc, #216]	; (80008ec <main+0x124>)
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fcdf 	bl	80011d8 <HAL_ADC_GetValue>
 800081a:	0002      	movs	r2, r0
 800081c:	2172      	movs	r1, #114	; 0x72
 800081e:	187b      	adds	r3, r7, r1
 8000820:	801a      	strh	r2, [r3, #0]

	  if (raw > max) {
 8000822:	187a      	adds	r2, r7, r1
 8000824:	2376      	movs	r3, #118	; 0x76
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	8812      	ldrh	r2, [r2, #0]
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	429a      	cmp	r2, r3
 800082e:	d905      	bls.n	800083c <main+0x74>
		  max = raw;
 8000830:	2376      	movs	r3, #118	; 0x76
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	2272      	movs	r2, #114	; 0x72
 8000836:	18ba      	adds	r2, r7, r2
 8000838:	8812      	ldrh	r2, [r2, #0]
 800083a:	801a      	strh	r2, [r3, #0]
	  }

	  if (raw < min) {
 800083c:	2372      	movs	r3, #114	; 0x72
 800083e:	18fa      	adds	r2, r7, r3
 8000840:	2374      	movs	r3, #116	; 0x74
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	8812      	ldrh	r2, [r2, #0]
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	d205      	bcs.n	8000858 <main+0x90>
		  min = raw;
 800084c:	2374      	movs	r3, #116	; 0x74
 800084e:	18fb      	adds	r3, r7, r3
 8000850:	2272      	movs	r2, #114	; 0x72
 8000852:	18ba      	adds	r2, r7, r2
 8000854:	8812      	ldrh	r2, [r2, #0]
 8000856:	801a      	strh	r2, [r3, #0]

		//HAL_ADC_Start(&hadc);
		//HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
		//raw = HAL_ADC_GetValue(&hadc);

	 	raw_percent =(float)(raw-min)/(max-min) * 100;// (float)( ((raw-min_raw)/(max_raw-min_raw))*100);
 8000858:	2572      	movs	r5, #114	; 0x72
 800085a:	197b      	adds	r3, r7, r5
 800085c:	881a      	ldrh	r2, [r3, #0]
 800085e:	2674      	movs	r6, #116	; 0x74
 8000860:	19bb      	adds	r3, r7, r6
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	0018      	movs	r0, r3
 8000868:	f7ff ff46 	bl	80006f8 <__aeabi_i2f>
 800086c:	1c04      	adds	r4, r0, #0
 800086e:	2376      	movs	r3, #118	; 0x76
 8000870:	18fb      	adds	r3, r7, r3
 8000872:	881a      	ldrh	r2, [r3, #0]
 8000874:	19bb      	adds	r3, r7, r6
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	0018      	movs	r0, r3
 800087c:	f7ff ff3c 	bl	80006f8 <__aeabi_i2f>
 8000880:	1c03      	adds	r3, r0, #0
 8000882:	1c19      	adds	r1, r3, #0
 8000884:	1c20      	adds	r0, r4, #0
 8000886:	f7ff fcd3 	bl	8000230 <__aeabi_fdiv>
 800088a:	1c03      	adds	r3, r0, #0
 800088c:	4918      	ldr	r1, [pc, #96]	; (80008f0 <main+0x128>)
 800088e:	1c18      	adds	r0, r3, #0
 8000890:	f7ff fde0 	bl	8000454 <__aeabi_fmul>
 8000894:	1c03      	adds	r3, r0, #0
 8000896:	1c18      	adds	r0, r3, #0
 8000898:	f7ff ff0e 	bl	80006b8 <__aeabi_f2iz>
 800089c:	0003      	movs	r3, r0
 800089e:	66bb      	str	r3, [r7, #104]	; 0x68

		sprintf(msg, "%d\t max %d\t min %d\t raw_percent %d\r\n", raw, max, min, raw_percent);
 80008a0:	197b      	adds	r3, r7, r5
 80008a2:	881c      	ldrh	r4, [r3, #0]
 80008a4:	2376      	movs	r3, #118	; 0x76
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	881d      	ldrh	r5, [r3, #0]
 80008aa:	19bb      	adds	r3, r7, r6
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	4911      	ldr	r1, [pc, #68]	; (80008f4 <main+0x12c>)
 80008b0:	1d38      	adds	r0, r7, #4
 80008b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80008b4:	9201      	str	r2, [sp, #4]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	002b      	movs	r3, r5
 80008ba:	0022      	movs	r2, r4
 80008bc:	f002 fa14 	bl	8002ce8 <siprintf>

		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	0018      	movs	r0, r3
 80008c4:	f7ff fc20 	bl	8000108 <strlen>
 80008c8:	0003      	movs	r3, r0
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	2301      	movs	r3, #1
 80008ce:	425b      	negs	r3, r3
 80008d0:	1d39      	adds	r1, r7, #4
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <main+0x130>)
 80008d4:	f001 fe72 	bl	80025bc <HAL_UART_Transmit>
				HAL_MAX_DELAY);


		HAL_Delay(100);
 80008d8:	2064      	movs	r0, #100	; 0x64
 80008da:	f000 fac7 	bl	8000e6c <HAL_Delay>
	  HAL_ADC_Start(&hadc);
 80008de:	e794      	b.n	800080a <main+0x42>
 80008e0:	00000fb4 	.word	0x00000fb4
 80008e4:	000008e5 	.word	0x000008e5
 80008e8:	0000270f 	.word	0x0000270f
 80008ec:	2000011c 	.word	0x2000011c
 80008f0:	42c80000 	.word	0x42c80000
 80008f4:	08003510 	.word	0x08003510
 80008f8:	20000098 	.word	0x20000098

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b099      	sub	sp, #100	; 0x64
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	242c      	movs	r4, #44	; 0x2c
 8000904:	193b      	adds	r3, r7, r4
 8000906:	0018      	movs	r0, r3
 8000908:	2334      	movs	r3, #52	; 0x34
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f002 f9e3 	bl	8002cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000912:	231c      	movs	r3, #28
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	0018      	movs	r0, r3
 8000918:	2310      	movs	r3, #16
 800091a:	001a      	movs	r2, r3
 800091c:	2100      	movs	r1, #0
 800091e:	f002 f9db 	bl	8002cd8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	0018      	movs	r0, r3
 8000926:	2318      	movs	r3, #24
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f002 f9d4 	bl	8002cd8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000930:	0021      	movs	r1, r4
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2212      	movs	r2, #18
 8000936:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2201      	movs	r2, #1
 800093c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2201      	movs	r2, #1
 8000942:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2210      	movs	r2, #16
 8000948:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2210      	movs	r2, #16
 800094e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000956:	187b      	adds	r3, r7, r1
 8000958:	0018      	movs	r0, r3
 800095a:	f000 ffef 	bl	800193c <HAL_RCC_OscConfig>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000962:	f000 f8cd 	bl	8000b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	211c      	movs	r1, #28
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2207      	movs	r2, #7
 800096c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2100      	movs	r1, #0
 8000984:	0018      	movs	r0, r3
 8000986:	f001 fb5f 	bl	8002048 <HAL_RCC_ClockConfig>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800098e:	f000 f8b7 	bl	8000b00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2201      	movs	r2, #1
 8000996:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fcc9 	bl	8002338 <HAL_RCCEx_PeriphCLKConfig>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009aa:	f000 f8a9 	bl	8000b00 <Error_Handler>
  }
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b019      	add	sp, #100	; 0x64
 80009b4:	bd90      	pop	{r4, r7, pc}
	...

080009b8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	0018      	movs	r0, r3
 80009c2:	230c      	movs	r3, #12
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f002 f986 	bl	8002cd8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <MX_ADC_Init+0xb0>)
 80009ce:	4a27      	ldr	r2, [pc, #156]	; (8000a6c <MX_ADC_Init+0xb4>)
 80009d0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_ADC_Init+0xb0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80009d8:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MX_ADC_Init+0xb0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_ADC_Init+0xb0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80009e4:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_ADC_Init+0xb0>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_ADC_Init+0xb0>)
 80009ec:	2204      	movs	r2, #4
 80009ee:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ADC_Init+0xb0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_ADC_Init+0xb0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ADC_Init+0xb0>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_ADC_Init+0xb0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_ADC_Init+0xb0>)
 8000a0a:	22c2      	movs	r2, #194	; 0xc2
 8000a0c:	32ff      	adds	r2, #255	; 0xff
 8000a0e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_ADC_Init+0xb0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_ADC_Init+0xb0>)
 8000a18:	2224      	movs	r2, #36	; 0x24
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_ADC_Init+0xb0>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_ADC_Init+0xb0>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fa42 	bl	8000eb0 <HAL_ADC_Init>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 f866 	bl	8000b00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2201      	movs	r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	0152      	lsls	r2, r2, #5
 8000a40:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	0552      	lsls	r2, r2, #21
 8000a48:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a4a:	1d3a      	adds	r2, r7, #4
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_ADC_Init+0xb0>)
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 fbcd 	bl	80011f0 <HAL_ADC_ConfigChannel>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000a5a:	f000 f851 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b004      	add	sp, #16
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	2000011c 	.word	0x2000011c
 8000a6c:	40012400 	.word	0x40012400

08000a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a76:	4a15      	ldr	r2, [pc, #84]	; (8000acc <MX_USART1_UART_Init+0x5c>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a7c:	2296      	movs	r2, #150	; 0x96
 8000a7e:	0212      	lsls	r2, r2, #8
 8000a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 fd2d 	bl	8002514 <HAL_UART_Init>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000abe:	f000 f81f 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000098 	.word	0x20000098
 8000acc:	40013800 	.word	0x40013800

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_GPIO_Init+0x2c>)
 8000ad8:	695a      	ldr	r2, [r3, #20]
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_GPIO_Init+0x2c>)
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	0289      	lsls	r1, r1, #10
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <MX_GPIO_Init+0x2c>)
 8000ae6:	695a      	ldr	r2, [r3, #20]
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	029b      	lsls	r3, r3, #10
 8000aec:	4013      	ands	r3, r2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	40021000 	.word	0x40021000

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <Error_Handler+0x6>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x44>)
 8000b10:	699a      	ldr	r2, [r3, #24]
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_MspInit+0x44>)
 8000b14:	2101      	movs	r1, #1
 8000b16:	430a      	orrs	r2, r1
 8000b18:	619a      	str	r2, [r3, #24]
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4013      	ands	r3, r2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x44>)
 8000b28:	69da      	ldr	r2, [r3, #28]
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	0549      	lsls	r1, r1, #21
 8000b30:	430a      	orrs	r2, r1
 8000b32:	61da      	str	r2, [r3, #28]
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_MspInit+0x44>)
 8000b36:	69da      	ldr	r2, [r3, #28]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	055b      	lsls	r3, r3, #21
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	2314      	movs	r3, #20
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	2314      	movs	r3, #20
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f002 f8b8 	bl	8002cd8 <memset>
  if(hadc->Instance==ADC1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_ADC_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12c      	bne.n	8000bcc <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_ADC_MspInit+0x88>)
 8000b74:	699a      	ldr	r2, [r3, #24]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_ADC_MspInit+0x88>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	0089      	lsls	r1, r1, #2
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	619a      	str	r2, [r3, #24]
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_ADC_MspInit+0x88>)
 8000b82:	699a      	ldr	r2, [r3, #24]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_ADC_MspInit+0x88>)
 8000b90:	695a      	ldr	r2, [r3, #20]
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_ADC_MspInit+0x88>)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	0289      	lsls	r1, r1, #10
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	615a      	str	r2, [r3, #20]
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_ADC_MspInit+0x88>)
 8000b9e:	695a      	ldr	r2, [r3, #20]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	029b      	lsls	r3, r3, #10
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000baa:	2114      	movs	r1, #20
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2202      	movs	r2, #2
 8000bb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	187a      	adds	r2, r7, r1
 8000bc0:	2390      	movs	r3, #144	; 0x90
 8000bc2:	05db      	lsls	r3, r3, #23
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 fd50 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b00a      	add	sp, #40	; 0x28
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40012400 	.word	0x40012400
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	2314      	movs	r3, #20
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	0018      	movs	r0, r3
 8000bea:	2314      	movs	r3, #20
 8000bec:	001a      	movs	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f002 f872 	bl	8002cd8 <memset>
  if(huart->Instance==USART1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a1d      	ldr	r2, [pc, #116]	; (8000c70 <HAL_UART_MspInit+0x94>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d133      	bne.n	8000c66 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_UART_MspInit+0x98>)
 8000c00:	699a      	ldr	r2, [r3, #24]
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <HAL_UART_MspInit+0x98>)
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	01c9      	lsls	r1, r1, #7
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	619a      	str	r2, [r3, #24]
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_UART_MspInit+0x98>)
 8000c0e:	699a      	ldr	r2, [r3, #24]
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	01db      	lsls	r3, r3, #7
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_UART_MspInit+0x98>)
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_UART_MspInit+0x98>)
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0289      	lsls	r1, r1, #10
 8000c24:	430a      	orrs	r2, r1
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_UART_MspInit+0x98>)
 8000c2a:	695a      	ldr	r2, [r3, #20]
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	029b      	lsls	r3, r3, #10
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c36:	2114      	movs	r1, #20
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	22c0      	movs	r2, #192	; 0xc0
 8000c3c:	00d2      	lsls	r2, r2, #3
 8000c3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2202      	movs	r2, #2
 8000c44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2201      	movs	r2, #1
 8000c56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	187a      	adds	r2, r7, r1
 8000c5a:	2390      	movs	r3, #144	; 0x90
 8000c5c:	05db      	lsls	r3, r3, #23
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 fd03 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b00a      	add	sp, #40	; 0x28
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	40013800 	.word	0x40013800
 8000c74:	40021000 	.word	0x40021000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f8ca 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	18d3      	adds	r3, r2, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f001 ffd4 	bl	8002c84 <__errno>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	425b      	negs	r3, r3
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	18d2      	adds	r2, r2, r3
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b006      	add	sp, #24
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20001800 	.word	0x20001800
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	2000008c 	.word	0x2000008c
 8000d10:	20000168 	.word	0x20000168

08000d14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d20:	4813      	ldr	r0, [pc, #76]	; (8000d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d22:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000d24:	4813      	ldr	r0, [pc, #76]	; (8000d74 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d26:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d28:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d2a:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <LoopForever+0xa>)
    CMP R1, R2
 8000d2c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d2e:	d105      	bne.n	8000d3c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000d30:	4812      	ldr	r0, [pc, #72]	; (8000d7c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d32:	4913      	ldr	r1, [pc, #76]	; (8000d80 <LoopForever+0x12>)
    STR R1, [R0]
 8000d34:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d36:	4813      	ldr	r0, [pc, #76]	; (8000d84 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d38:	4913      	ldr	r1, [pc, #76]	; (8000d88 <LoopForever+0x1a>)
    STR R1, [R0]
 8000d3a:	6001      	str	r1, [r0, #0]

08000d3c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d3e:	4914      	ldr	r1, [pc, #80]	; (8000d90 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <LoopForever+0x26>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000d54:	4c11      	ldr	r4, [pc, #68]	; (8000d9c <LoopForever+0x2e>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d62:	f7ff ffd7 	bl	8000d14 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d66:	f001 ff93 	bl	8002c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d6a:	f7ff fd2d 	bl	80007c8 <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   r0, =_estack
 8000d70:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000d74:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000d78:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000d7c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000d80:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000d84:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000d88:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d94:	0800366c 	.word	0x0800366c
  ldr r2, =_sbss
 8000d98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d9c:	20000164 	.word	0x20000164

08000da0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_IRQHandler>
	...

08000da4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_Init+0x24>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_Init+0x24>)
 8000dae:	2110      	movs	r1, #16
 8000db0:	430a      	orrs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f000 f809 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dba:	f7ff fea5 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40022000 	.word	0x40022000

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_InitTick+0x5c>)
 8000dd6:	681c      	ldr	r4, [r3, #0]
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_InitTick+0x60>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0019      	movs	r1, r3
 8000dde:	23fa      	movs	r3, #250	; 0xfa
 8000de0:	0098      	lsls	r0, r3, #2
 8000de2:	f7ff f999 	bl	8000118 <__udivsi3>
 8000de6:	0003      	movs	r3, r0
 8000de8:	0019      	movs	r1, r3
 8000dea:	0020      	movs	r0, r4
 8000dec:	f7ff f994 	bl	8000118 <__udivsi3>
 8000df0:	0003      	movs	r3, r0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 fc2d 	bl	8001652 <HAL_SYSTICK_Config>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e00f      	b.n	8000e20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d80b      	bhi.n	8000e1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 fc0a 	bl	8001628 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_InitTick+0x64>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b003      	add	sp, #12
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	18d2      	adds	r2, r2, r3
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_IncTick+0x20>)
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	20000008 	.word	0x20000008
 8000e54:	2000015c 	.word	0x2000015c

08000e58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	2000015c 	.word	0x2000015c

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff fff0 	bl	8000e58 <HAL_GetTick>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3301      	adds	r3, #1
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_Delay+0x40>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	189b      	adds	r3, r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	f7ff ffe0 	bl	8000e58 <HAL_GetTick>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b004      	add	sp, #16
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000008 	.word	0x20000008

08000eb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb8:	230f      	movs	r3, #15
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e125      	b.n	800111a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10a      	bne.n	8000eec <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2234      	movs	r2, #52	; 0x34
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f7ff fe32 	bl	8000b50 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d000      	beq.n	8000ef8 <HAL_ADC_Init+0x48>
 8000ef6:	e103      	b.n	8001100 <HAL_ADC_Init+0x250>
 8000ef8:	230f      	movs	r3, #15
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d000      	beq.n	8000f04 <HAL_ADC_Init+0x54>
 8000f02:	e0fd      	b.n	8001100 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000f0e:	d000      	beq.n	8000f12 <HAL_ADC_Init+0x62>
 8000f10:	e0f6      	b.n	8001100 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f16:	4a83      	ldr	r2, [pc, #524]	; (8001124 <HAL_ADC_Init+0x274>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d112      	bne.n	8000f56 <HAL_ADC_Init+0xa6>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d009      	beq.n	8000f52 <HAL_ADC_Init+0xa2>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	401a      	ands	r2, r3
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d101      	bne.n	8000f56 <HAL_ADC_Init+0xa6>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_ADC_Init+0xa8>
 8000f56:	2300      	movs	r3, #0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d116      	bne.n	8000f8a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2218      	movs	r2, #24
 8000f64:	4393      	bics	r3, r2
 8000f66:	0019      	movs	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	0899      	lsrs	r1, r3, #2
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4964      	ldr	r1, [pc, #400]	; (8001128 <HAL_ADC_Init+0x278>)
 8000f96:	400a      	ands	r2, r1
 8000f98:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7e1b      	ldrb	r3, [r3, #24]
 8000f9e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7e5b      	ldrb	r3, [r3, #25]
 8000fa4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fa6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7e9b      	ldrb	r3, [r3, #26]
 8000fac:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000fae:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d002      	beq.n	8000fbe <HAL_ADC_Init+0x10e>
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	015b      	lsls	r3, r3, #5
 8000fbc:	e000      	b.n	8000fc0 <HAL_ADC_Init+0x110>
 8000fbe:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000fc0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000fc6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d101      	bne.n	8000fd4 <HAL_ADC_Init+0x124>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	e000      	b.n	8000fd6 <HAL_ADC_Init+0x126>
 8000fd4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000fd6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2124      	movs	r1, #36	; 0x24
 8000fdc:	5c5b      	ldrb	r3, [r3, r1]
 8000fde:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000fe0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7edb      	ldrb	r3, [r3, #27]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d115      	bne.n	800101c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7e9b      	ldrb	r3, [r3, #26]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d105      	bne.n	8001004 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	0252      	lsls	r2, r2, #9
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	e00b      	b.n	800101c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001008:	2220      	movs	r2, #32
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001014:	2201      	movs	r2, #1
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69da      	ldr	r2, [r3, #28]
 8001020:	23c2      	movs	r3, #194	; 0xc2
 8001022:	33ff      	adds	r3, #255	; 0xff
 8001024:	429a      	cmp	r2, r3
 8001026:	d007      	beq.n	8001038 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001030:	4313      	orrs	r3, r2
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	4313      	orrs	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68d9      	ldr	r1, [r3, #12]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	430a      	orrs	r2, r1
 8001046:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	055b      	lsls	r3, r3, #21
 8001050:	429a      	cmp	r2, r3
 8001052:	d01b      	beq.n	800108c <HAL_ADC_Init+0x1dc>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001058:	2b01      	cmp	r3, #1
 800105a:	d017      	beq.n	800108c <HAL_ADC_Init+0x1dc>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001060:	2b02      	cmp	r3, #2
 8001062:	d013      	beq.n	800108c <HAL_ADC_Init+0x1dc>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001068:	2b03      	cmp	r3, #3
 800106a:	d00f      	beq.n	800108c <HAL_ADC_Init+0x1dc>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	2b04      	cmp	r3, #4
 8001072:	d00b      	beq.n	800108c <HAL_ADC_Init+0x1dc>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	2b05      	cmp	r3, #5
 800107a:	d007      	beq.n	800108c <HAL_ADC_Init+0x1dc>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	2b06      	cmp	r3, #6
 8001082:	d003      	beq.n	800108c <HAL_ADC_Init+0x1dc>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001088:	2b07      	cmp	r3, #7
 800108a:	d112      	bne.n	80010b2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2107      	movs	r1, #7
 8001098:	438a      	bics	r2, r1
 800109a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6959      	ldr	r1, [r3, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a6:	2207      	movs	r2, #7
 80010a8:	401a      	ands	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_ADC_Init+0x27c>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d10b      	bne.n	80010da <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010cc:	2203      	movs	r2, #3
 80010ce:	4393      	bics	r3, r2
 80010d0:	2201      	movs	r2, #1
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010d8:	e01c      	b.n	8001114 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010de:	2212      	movs	r2, #18
 80010e0:	4393      	bics	r3, r2
 80010e2:	2210      	movs	r2, #16
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ee:	2201      	movs	r2, #1
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80010f6:	230f      	movs	r3, #15
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010fe:	e009      	b.n	8001114 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001104:	2210      	movs	r2, #16
 8001106:	431a      	orrs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800110c:	230f      	movs	r3, #15
 800110e:	18fb      	adds	r3, r7, r3
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001114:	230f      	movs	r3, #15
 8001116:	18fb      	adds	r3, r7, r3
 8001118:	781b      	ldrb	r3, [r3, #0]
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b004      	add	sp, #16
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	fffffefd 	.word	0xfffffefd
 8001128:	fffe0219 	.word	0xfffe0219
 800112c:	833fffe7 	.word	0x833fffe7

08001130 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001138:	230f      	movs	r3, #15
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2204      	movs	r2, #4
 8001148:	4013      	ands	r3, r2
 800114a:	d138      	bne.n	80011be <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2234      	movs	r2, #52	; 0x34
 8001150:	5c9b      	ldrb	r3, [r3, r2]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <HAL_ADC_Start+0x2a>
 8001156:	2302      	movs	r3, #2
 8001158:	e038      	b.n	80011cc <HAL_ADC_Start+0x9c>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2234      	movs	r2, #52	; 0x34
 800115e:	2101      	movs	r1, #1
 8001160:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7e5b      	ldrb	r3, [r3, #25]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d007      	beq.n	800117a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800116a:	230f      	movs	r3, #15
 800116c:	18fc      	adds	r4, r7, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	0018      	movs	r0, r3
 8001172:	f000 f94b 	bl	800140c <ADC_Enable>
 8001176:	0003      	movs	r3, r0
 8001178:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800117a:	230f      	movs	r3, #15
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d120      	bne.n	80011c6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001188:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <HAL_ADC_Start+0xa4>)
 800118a:	4013      	ands	r3, r2
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	0052      	lsls	r2, r2, #1
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2234      	movs	r2, #52	; 0x34
 80011a0:	2100      	movs	r1, #0
 80011a2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	221c      	movs	r2, #28
 80011aa:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2104      	movs	r1, #4
 80011b8:	430a      	orrs	r2, r1
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	e003      	b.n	80011c6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011be:	230f      	movs	r3, #15
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	2202      	movs	r2, #2
 80011c4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011c6:	230f      	movs	r3, #15
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	781b      	ldrb	r3, [r3, #0]
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b005      	add	sp, #20
 80011d2:	bd90      	pop	{r4, r7, pc}
 80011d4:	fffff0fe 	.word	0xfffff0fe

080011d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fa:	230f      	movs	r3, #15
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	055b      	lsls	r3, r3, #21
 800120e:	429a      	cmp	r2, r3
 8001210:	d011      	beq.n	8001236 <HAL_ADC_ConfigChannel+0x46>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	2b01      	cmp	r3, #1
 8001218:	d00d      	beq.n	8001236 <HAL_ADC_ConfigChannel+0x46>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	2b02      	cmp	r3, #2
 8001220:	d009      	beq.n	8001236 <HAL_ADC_ConfigChannel+0x46>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	2b03      	cmp	r3, #3
 8001228:	d005      	beq.n	8001236 <HAL_ADC_ConfigChannel+0x46>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122e:	2b04      	cmp	r3, #4
 8001230:	d001      	beq.n	8001236 <HAL_ADC_ConfigChannel+0x46>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2234      	movs	r2, #52	; 0x34
 800123a:	5c9b      	ldrb	r3, [r3, r2]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x54>
 8001240:	2302      	movs	r3, #2
 8001242:	e0d0      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x1f6>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2234      	movs	r2, #52	; 0x34
 8001248:	2101      	movs	r1, #1
 800124a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2204      	movs	r2, #4
 8001254:	4013      	ands	r3, r2
 8001256:	d000      	beq.n	800125a <HAL_ADC_ConfigChannel+0x6a>
 8001258:	e0b4      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4a64      	ldr	r2, [pc, #400]	; (80013f0 <HAL_ADC_ConfigChannel+0x200>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d100      	bne.n	8001266 <HAL_ADC_ConfigChannel+0x76>
 8001264:	e082      	b.n	800136c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	409a      	lsls	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	055b      	lsls	r3, r3, #21
 8001284:	429a      	cmp	r2, r3
 8001286:	d037      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	2b01      	cmp	r3, #1
 800128e:	d033      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x108>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	2b02      	cmp	r3, #2
 8001296:	d02f      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x108>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	2b03      	cmp	r3, #3
 800129e:	d02b      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d027      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x108>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	d023      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x108>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	2b06      	cmp	r3, #6
 80012b6:	d01f      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x108>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012bc:	2b07      	cmp	r3, #7
 80012be:	d01b      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	2107      	movs	r1, #7
 80012cc:	400b      	ands	r3, r1
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d012      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2107      	movs	r1, #7
 80012de:	438a      	bics	r2, r1
 80012e0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6959      	ldr	r1, [r3, #20]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2207      	movs	r2, #7
 80012ee:	401a      	ands	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b10      	cmp	r3, #16
 80012fe:	d007      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x120>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b11      	cmp	r3, #17
 8001306:	d003      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x120>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b12      	cmp	r3, #18
 800130e:	d163      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001310:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <HAL_ADC_ConfigChannel+0x204>)
 8001312:	6819      	ldr	r1, [r3, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b10      	cmp	r3, #16
 800131a:	d009      	beq.n	8001330 <HAL_ADC_ConfigChannel+0x140>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b11      	cmp	r3, #17
 8001322:	d102      	bne.n	800132a <HAL_ADC_ConfigChannel+0x13a>
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	03db      	lsls	r3, r3, #15
 8001328:	e004      	b.n	8001334 <HAL_ADC_ConfigChannel+0x144>
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	045b      	lsls	r3, r3, #17
 800132e:	e001      	b.n	8001334 <HAL_ADC_ConfigChannel+0x144>
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	041b      	lsls	r3, r3, #16
 8001334:	4a2f      	ldr	r2, [pc, #188]	; (80013f4 <HAL_ADC_ConfigChannel+0x204>)
 8001336:	430b      	orrs	r3, r1
 8001338:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b10      	cmp	r3, #16
 8001340:	d14a      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_ADC_ConfigChannel+0x208>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	492d      	ldr	r1, [pc, #180]	; (80013fc <HAL_ADC_ConfigChannel+0x20c>)
 8001348:	0018      	movs	r0, r3
 800134a:	f7fe fee5 	bl	8000118 <__udivsi3>
 800134e:	0003      	movs	r3, r0
 8001350:	001a      	movs	r2, r3
 8001352:	0013      	movs	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	189b      	adds	r3, r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800135c:	e002      	b.n	8001364 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3b01      	subs	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f9      	bne.n	800135e <HAL_ADC_ConfigChannel+0x16e>
 800136a:	e035      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2101      	movs	r1, #1
 8001378:	4099      	lsls	r1, r3
 800137a:	000b      	movs	r3, r1
 800137c:	43d9      	mvns	r1, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	400a      	ands	r2, r1
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b10      	cmp	r3, #16
 800138c:	d007      	beq.n	800139e <HAL_ADC_ConfigChannel+0x1ae>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b11      	cmp	r3, #17
 8001394:	d003      	beq.n	800139e <HAL_ADC_ConfigChannel+0x1ae>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b12      	cmp	r3, #18
 800139c:	d11c      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_ADC_ConfigChannel+0x204>)
 80013a0:	6819      	ldr	r1, [r3, #0]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b10      	cmp	r3, #16
 80013a8:	d007      	beq.n	80013ba <HAL_ADC_ConfigChannel+0x1ca>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b11      	cmp	r3, #17
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x1c6>
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HAL_ADC_ConfigChannel+0x210>)
 80013b4:	e002      	b.n	80013bc <HAL_ADC_ConfigChannel+0x1cc>
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_ADC_ConfigChannel+0x214>)
 80013b8:	e000      	b.n	80013bc <HAL_ADC_ConfigChannel+0x1cc>
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_ADC_ConfigChannel+0x218>)
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <HAL_ADC_ConfigChannel+0x204>)
 80013be:	400b      	ands	r3, r1
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e009      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c8:	2220      	movs	r2, #32
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80013d0:	230f      	movs	r3, #15
 80013d2:	18fb      	adds	r3, r7, r3
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2234      	movs	r2, #52	; 0x34
 80013dc:	2100      	movs	r1, #0
 80013de:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	781b      	ldrb	r3, [r3, #0]
}
 80013e6:	0018      	movs	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b004      	add	sp, #16
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	00001001 	.word	0x00001001
 80013f4:	40012708 	.word	0x40012708
 80013f8:	20000000 	.word	0x20000000
 80013fc:	000f4240 	.word	0x000f4240
 8001400:	ffbfffff 	.word	0xffbfffff
 8001404:	feffffff 	.word	0xfeffffff
 8001408:	ff7fffff 	.word	0xff7fffff

0800140c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2203      	movs	r2, #3
 8001424:	4013      	ands	r3, r2
 8001426:	2b01      	cmp	r3, #1
 8001428:	d112      	bne.n	8001450 <ADC_Enable+0x44>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	4013      	ands	r3, r2
 8001434:	2b01      	cmp	r3, #1
 8001436:	d009      	beq.n	800144c <ADC_Enable+0x40>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	401a      	ands	r2, r3
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	429a      	cmp	r2, r3
 800144a:	d101      	bne.n	8001450 <ADC_Enable+0x44>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <ADC_Enable+0x46>
 8001450:	2300      	movs	r3, #0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d14b      	bne.n	80014ee <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <ADC_Enable+0xec>)
 800145e:	4013      	ands	r3, r2
 8001460:	d00d      	beq.n	800147e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001466:	2210      	movs	r2, #16
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001472:	2201      	movs	r2, #1
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e038      	b.n	80014f0 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	430a      	orrs	r2, r1
 800148c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <ADC_Enable+0xf0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	491b      	ldr	r1, [pc, #108]	; (8001500 <ADC_Enable+0xf4>)
 8001494:	0018      	movs	r0, r3
 8001496:	f7fe fe3f 	bl	8000118 <__udivsi3>
 800149a:	0003      	movs	r3, r0
 800149c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800149e:	e002      	b.n	80014a6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f9      	bne.n	80014a0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ac:	f7ff fcd4 	bl	8000e58 <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014b4:	e014      	b.n	80014e0 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014b6:	f7ff fccf 	bl	8000e58 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d90d      	bls.n	80014e0 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c8:	2210      	movs	r2, #16
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d4:	2201      	movs	r2, #1
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e007      	b.n	80014f0 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d1e3      	bne.n	80014b6 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b004      	add	sp, #16
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	80000017 	.word	0x80000017
 80014fc:	20000000 	.word	0x20000000
 8001500:	000f4240 	.word	0x000f4240

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	0002      	movs	r2, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b7f      	cmp	r3, #127	; 0x7f
 8001518:	d828      	bhi.n	800156c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800151a:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <__NVIC_SetPriority+0xd4>)
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b25b      	sxtb	r3, r3
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	33c0      	adds	r3, #192	; 0xc0
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	589b      	ldr	r3, [r3, r2]
 800152a:	1dfa      	adds	r2, r7, #7
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	0011      	movs	r1, r2
 8001530:	2203      	movs	r2, #3
 8001532:	400a      	ands	r2, r1
 8001534:	00d2      	lsls	r2, r2, #3
 8001536:	21ff      	movs	r1, #255	; 0xff
 8001538:	4091      	lsls	r1, r2
 800153a:	000a      	movs	r2, r1
 800153c:	43d2      	mvns	r2, r2
 800153e:	401a      	ands	r2, r3
 8001540:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	22ff      	movs	r2, #255	; 0xff
 8001548:	401a      	ands	r2, r3
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	0018      	movs	r0, r3
 8001550:	2303      	movs	r3, #3
 8001552:	4003      	ands	r3, r0
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001558:	481f      	ldr	r0, [pc, #124]	; (80015d8 <__NVIC_SetPriority+0xd4>)
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b25b      	sxtb	r3, r3
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	430a      	orrs	r2, r1
 8001564:	33c0      	adds	r3, #192	; 0xc0
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800156a:	e031      	b.n	80015d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <__NVIC_SetPriority+0xd8>)
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	0019      	movs	r1, r3
 8001574:	230f      	movs	r3, #15
 8001576:	400b      	ands	r3, r1
 8001578:	3b08      	subs	r3, #8
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3306      	adds	r3, #6
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	18d3      	adds	r3, r2, r3
 8001582:	3304      	adds	r3, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	1dfa      	adds	r2, r7, #7
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	0011      	movs	r1, r2
 800158c:	2203      	movs	r2, #3
 800158e:	400a      	ands	r2, r1
 8001590:	00d2      	lsls	r2, r2, #3
 8001592:	21ff      	movs	r1, #255	; 0xff
 8001594:	4091      	lsls	r1, r2
 8001596:	000a      	movs	r2, r1
 8001598:	43d2      	mvns	r2, r2
 800159a:	401a      	ands	r2, r3
 800159c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	22ff      	movs	r2, #255	; 0xff
 80015a4:	401a      	ands	r2, r3
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	0018      	movs	r0, r3
 80015ac:	2303      	movs	r3, #3
 80015ae:	4003      	ands	r3, r0
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <__NVIC_SetPriority+0xd8>)
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	001c      	movs	r4, r3
 80015bc:	230f      	movs	r3, #15
 80015be:	4023      	ands	r3, r4
 80015c0:	3b08      	subs	r3, #8
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	430a      	orrs	r2, r1
 80015c6:	3306      	adds	r3, #6
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	18c3      	adds	r3, r0, r3
 80015cc:	3304      	adds	r3, #4
 80015ce:	601a      	str	r2, [r3, #0]
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b003      	add	sp, #12
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <SysTick_Config+0x40>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e010      	b.n	8001618 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <SysTick_Config+0x44>)
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	3a01      	subs	r2, #1
 80015fc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	2301      	movs	r3, #1
 8001600:	425b      	negs	r3, r3
 8001602:	2103      	movs	r1, #3
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff ff7d 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <SysTick_Config+0x44>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x44>)
 8001612:	2207      	movs	r2, #7
 8001614:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001616:	2300      	movs	r3, #0
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}
 8001620:	00ffffff 	.word	0x00ffffff
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	210f      	movs	r1, #15
 8001634:	187b      	adds	r3, r7, r1
 8001636:	1c02      	adds	r2, r0, #0
 8001638:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	187b      	adds	r3, r7, r1
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b25b      	sxtb	r3, r3
 8001642:	0011      	movs	r1, r2
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff ff5d 	bl	8001504 <__NVIC_SetPriority>
}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b004      	add	sp, #16
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff ffbf 	bl	80015e0 <SysTick_Config>
 8001662:	0003      	movs	r3, r0
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	e149      	b.n	8001910 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4091      	lsls	r1, r2
 8001686:	000a      	movs	r2, r1
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d100      	bne.n	8001694 <HAL_GPIO_Init+0x28>
 8001692:	e13a      	b.n	800190a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d00b      	beq.n	80016b4 <HAL_GPIO_Init+0x48>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a8:	2b11      	cmp	r3, #17
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b12      	cmp	r3, #18
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	43da      	mvns	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	409a      	lsls	r2, r3
 80016d6:	0013      	movs	r3, r2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	43da      	mvns	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	2201      	movs	r2, #1
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	409a      	lsls	r2, r3
 8001724:	0013      	movs	r3, r2
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	409a      	lsls	r2, r3
 8001738:	0013      	movs	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0xea>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b12      	cmp	r3, #18
 8001754:	d123      	bne.n	800179e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	0092      	lsls	r2, r2, #2
 8001760:	58d3      	ldr	r3, [r2, r3]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	2207      	movs	r2, #7
 8001768:	4013      	ands	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	43da      	mvns	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2107      	movs	r1, #7
 8001782:	400b      	ands	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	6939      	ldr	r1, [r7, #16]
 800179c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2203      	movs	r2, #3
 80017bc:	401a      	ands	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	409a      	lsls	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	055b      	lsls	r3, r3, #21
 80017da:	4013      	ands	r3, r2
 80017dc:	d100      	bne.n	80017e0 <HAL_GPIO_Init+0x174>
 80017de:	e094      	b.n	800190a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e0:	4b51      	ldr	r3, [pc, #324]	; (8001928 <HAL_GPIO_Init+0x2bc>)
 80017e2:	699a      	ldr	r2, [r3, #24]
 80017e4:	4b50      	ldr	r3, [pc, #320]	; (8001928 <HAL_GPIO_Init+0x2bc>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	430a      	orrs	r2, r1
 80017ea:	619a      	str	r2, [r3, #24]
 80017ec:	4b4e      	ldr	r3, [pc, #312]	; (8001928 <HAL_GPIO_Init+0x2bc>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	2201      	movs	r2, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017f8:	4a4c      	ldr	r2, [pc, #304]	; (800192c <HAL_GPIO_Init+0x2c0>)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	589b      	ldr	r3, [r3, r2]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2203      	movs	r2, #3
 800180a:	4013      	ands	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	409a      	lsls	r2, r3
 8001812:	0013      	movs	r3, r2
 8001814:	43da      	mvns	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	2390      	movs	r3, #144	; 0x90
 8001820:	05db      	lsls	r3, r3, #23
 8001822:	429a      	cmp	r2, r3
 8001824:	d00d      	beq.n	8001842 <HAL_GPIO_Init+0x1d6>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a41      	ldr	r2, [pc, #260]	; (8001930 <HAL_GPIO_Init+0x2c4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d007      	beq.n	800183e <HAL_GPIO_Init+0x1d2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a40      	ldr	r2, [pc, #256]	; (8001934 <HAL_GPIO_Init+0x2c8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_GPIO_Init+0x1ce>
 8001836:	2302      	movs	r3, #2
 8001838:	e004      	b.n	8001844 <HAL_GPIO_Init+0x1d8>
 800183a:	2305      	movs	r3, #5
 800183c:	e002      	b.n	8001844 <HAL_GPIO_Init+0x1d8>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_GPIO_Init+0x1d8>
 8001842:	2300      	movs	r3, #0
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	2103      	movs	r1, #3
 8001848:	400a      	ands	r2, r1
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	4093      	lsls	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001854:	4935      	ldr	r1, [pc, #212]	; (800192c <HAL_GPIO_Init+0x2c0>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001862:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_GPIO_Init+0x2cc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43da      	mvns	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	025b      	lsls	r3, r3, #9
 800187a:	4013      	ands	r3, r2
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001886:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <HAL_GPIO_Init+0x2cc>)
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_GPIO_Init+0x2cc>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43da      	mvns	r2, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	029b      	lsls	r3, r3, #10
 80018a4:	4013      	ands	r3, r2
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_GPIO_Init+0x2cc>)
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_GPIO_Init+0x2cc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43da      	mvns	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	035b      	lsls	r3, r3, #13
 80018ce:	4013      	ands	r3, r2
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_GPIO_Init+0x2cc>)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_GPIO_Init+0x2cc>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43da      	mvns	r2, r3
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	039b      	lsls	r3, r3, #14
 80018f8:	4013      	ands	r3, r2
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_GPIO_Init+0x2cc>)
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	40da      	lsrs	r2, r3
 8001918:	1e13      	subs	r3, r2, #0
 800191a:	d000      	beq.n	800191e <HAL_GPIO_Init+0x2b2>
 800191c:	e6ae      	b.n	800167c <HAL_GPIO_Init+0x10>
  } 
}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	b006      	add	sp, #24
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000
 8001930:	48000400 	.word	0x48000400
 8001934:	48000800 	.word	0x48000800
 8001938:	40010400 	.word	0x40010400

0800193c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	f000 fb76 	bl	800203c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2201      	movs	r2, #1
 8001956:	4013      	ands	r3, r2
 8001958:	d100      	bne.n	800195c <HAL_RCC_OscConfig+0x20>
 800195a:	e08e      	b.n	8001a7a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800195c:	4bc5      	ldr	r3, [pc, #788]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	220c      	movs	r2, #12
 8001962:	4013      	ands	r3, r2
 8001964:	2b04      	cmp	r3, #4
 8001966:	d00e      	beq.n	8001986 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001968:	4bc2      	ldr	r3, [pc, #776]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	220c      	movs	r2, #12
 800196e:	4013      	ands	r3, r2
 8001970:	2b08      	cmp	r3, #8
 8001972:	d117      	bne.n	80019a4 <HAL_RCC_OscConfig+0x68>
 8001974:	4bbf      	ldr	r3, [pc, #764]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	23c0      	movs	r3, #192	; 0xc0
 800197a:	025b      	lsls	r3, r3, #9
 800197c:	401a      	ands	r2, r3
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	025b      	lsls	r3, r3, #9
 8001982:	429a      	cmp	r2, r3
 8001984:	d10e      	bne.n	80019a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001986:	4bbb      	ldr	r3, [pc, #748]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	029b      	lsls	r3, r3, #10
 800198e:	4013      	ands	r3, r2
 8001990:	d100      	bne.n	8001994 <HAL_RCC_OscConfig+0x58>
 8001992:	e071      	b.n	8001a78 <HAL_RCC_OscConfig+0x13c>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d000      	beq.n	800199e <HAL_RCC_OscConfig+0x62>
 800199c:	e06c      	b.n	8001a78 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	f000 fb4c 	bl	800203c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_OscConfig+0x80>
 80019ac:	4bb1      	ldr	r3, [pc, #708]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4bb0      	ldr	r3, [pc, #704]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	0249      	lsls	r1, r1, #9
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e02f      	b.n	8001a1c <HAL_RCC_OscConfig+0xe0>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10c      	bne.n	80019de <HAL_RCC_OscConfig+0xa2>
 80019c4:	4bab      	ldr	r3, [pc, #684]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4baa      	ldr	r3, [pc, #680]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019ca:	49ab      	ldr	r1, [pc, #684]	; (8001c78 <HAL_RCC_OscConfig+0x33c>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	4ba8      	ldr	r3, [pc, #672]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4ba7      	ldr	r3, [pc, #668]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019d6:	49a9      	ldr	r1, [pc, #676]	; (8001c7c <HAL_RCC_OscConfig+0x340>)
 80019d8:	400a      	ands	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e01e      	b.n	8001a1c <HAL_RCC_OscConfig+0xe0>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d10e      	bne.n	8001a04 <HAL_RCC_OscConfig+0xc8>
 80019e6:	4ba3      	ldr	r3, [pc, #652]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4ba2      	ldr	r3, [pc, #648]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	02c9      	lsls	r1, r1, #11
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	4b9f      	ldr	r3, [pc, #636]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b9e      	ldr	r3, [pc, #632]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	0249      	lsls	r1, r1, #9
 80019fe:	430a      	orrs	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0xe0>
 8001a04:	4b9b      	ldr	r3, [pc, #620]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b9a      	ldr	r3, [pc, #616]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a0a:	499b      	ldr	r1, [pc, #620]	; (8001c78 <HAL_RCC_OscConfig+0x33c>)
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	4b98      	ldr	r3, [pc, #608]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b97      	ldr	r3, [pc, #604]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a16:	4999      	ldr	r1, [pc, #612]	; (8001c7c <HAL_RCC_OscConfig+0x340>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d014      	beq.n	8001a4e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fa18 	bl	8000e58 <HAL_GetTick>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fa13 	bl	8000e58 <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b64      	cmp	r3, #100	; 0x64
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e2fd      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a40:	4b8c      	ldr	r3, [pc, #560]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0xf2>
 8001a4c:	e015      	b.n	8001a7a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fa03 	bl	8000e58 <HAL_GetTick>
 8001a52:	0003      	movs	r3, r0
 8001a54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff f9fe 	bl	8000e58 <HAL_GetTick>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e2e8      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	029b      	lsls	r3, r3, #10
 8001a72:	4013      	ands	r3, r2
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x11c>
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d100      	bne.n	8001a86 <HAL_RCC_OscConfig+0x14a>
 8001a84:	e06c      	b.n	8001b60 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a86:	4b7b      	ldr	r3, [pc, #492]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d00e      	beq.n	8001aae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a90:	4b78      	ldr	r3, [pc, #480]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	220c      	movs	r2, #12
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d11f      	bne.n	8001adc <HAL_RCC_OscConfig+0x1a0>
 8001a9c:	4b75      	ldr	r3, [pc, #468]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	23c0      	movs	r3, #192	; 0xc0
 8001aa2:	025b      	lsls	r3, r3, #9
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d116      	bne.n	8001adc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	4b71      	ldr	r3, [pc, #452]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x188>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e2bb      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b6b      	ldr	r3, [pc, #428]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	22f8      	movs	r2, #248	; 0xf8
 8001aca:	4393      	bics	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00da      	lsls	r2, r3, #3
 8001ad4:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	e041      	b.n	8001b60 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d024      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f9b2 	bl	8000e58 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff f9ad 	bl	8000e58 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e297      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2202      	movs	r2, #2
 8001b12:	4013      	ands	r3, r2
 8001b14:	d0f1      	beq.n	8001afa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	22f8      	movs	r2, #248	; 0xf8
 8001b1c:	4393      	bics	r3, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	00da      	lsls	r2, r3, #3
 8001b26:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e018      	b.n	8001b60 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2e:	4b51      	ldr	r3, [pc, #324]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	438a      	bics	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f98d 	bl	8000e58 <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b44:	f7ff f988 	bl	8000e58 <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e272      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b56:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d1f1      	bne.n	8001b44 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2208      	movs	r2, #8
 8001b66:	4013      	ands	r3, r2
 8001b68:	d036      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d019      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b76:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff f96b 	bl	8000e58 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff f966 	bl	8000e58 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e250      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d0f1      	beq.n	8001b88 <HAL_RCC_OscConfig+0x24c>
 8001ba4:	e018      	b.n	8001bd8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001baa:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	438a      	bics	r2, r1
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff f951 	bl	8000e58 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff f94c 	bl	8000e58 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e236      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d1f1      	bne.n	8001bbc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	4013      	ands	r3, r2
 8001be0:	d100      	bne.n	8001be4 <HAL_RCC_OscConfig+0x2a8>
 8001be2:	e0b5      	b.n	8001d50 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be4:	231f      	movs	r3, #31
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001bee:	69da      	ldr	r2, [r3, #28]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	055b      	lsls	r3, r3, #21
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d111      	bne.n	8001c1c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	0549      	lsls	r1, r1, #21
 8001c02:	430a      	orrs	r2, r1
 8001c04:	61da      	str	r2, [r3, #28]
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	055b      	lsls	r3, r3, #21
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c14:	231f      	movs	r3, #31
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_RCC_OscConfig+0x344>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4013      	ands	r3, r2
 8001c26:	d11a      	bne.n	8001c5e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_RCC_OscConfig+0x344>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <HAL_RCC_OscConfig+0x344>)
 8001c2e:	2180      	movs	r1, #128	; 0x80
 8001c30:	0049      	lsls	r1, r1, #1
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c36:	f7ff f90f 	bl	8000e58 <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c40:	f7ff f90a 	bl	8000e58 <HAL_GetTick>
 8001c44:	0002      	movs	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1f4      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_OscConfig+0x344>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d10e      	bne.n	8001c84 <HAL_RCC_OscConfig+0x348>
 8001c66:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	621a      	str	r2, [r3, #32]
 8001c72:	e035      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3a4>
 8001c74:	40021000 	.word	0x40021000
 8001c78:	fffeffff 	.word	0xfffeffff
 8001c7c:	fffbffff 	.word	0xfffbffff
 8001c80:	40007000 	.word	0x40007000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x36a>
 8001c8c:	4bca      	ldr	r3, [pc, #808]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001c8e:	6a1a      	ldr	r2, [r3, #32]
 8001c90:	4bc9      	ldr	r3, [pc, #804]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001c92:	2101      	movs	r1, #1
 8001c94:	438a      	bics	r2, r1
 8001c96:	621a      	str	r2, [r3, #32]
 8001c98:	4bc7      	ldr	r3, [pc, #796]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001c9a:	6a1a      	ldr	r2, [r3, #32]
 8001c9c:	4bc6      	ldr	r3, [pc, #792]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001c9e:	2104      	movs	r1, #4
 8001ca0:	438a      	bics	r2, r1
 8001ca2:	621a      	str	r2, [r3, #32]
 8001ca4:	e01c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3a4>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x38c>
 8001cae:	4bc2      	ldr	r3, [pc, #776]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
 8001cb2:	4bc1      	ldr	r3, [pc, #772]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	621a      	str	r2, [r3, #32]
 8001cba:	4bbf      	ldr	r3, [pc, #764]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cbc:	6a1a      	ldr	r2, [r3, #32]
 8001cbe:	4bbe      	ldr	r3, [pc, #760]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	621a      	str	r2, [r3, #32]
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3a4>
 8001cc8:	4bbb      	ldr	r3, [pc, #748]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cca:	6a1a      	ldr	r2, [r3, #32]
 8001ccc:	4bba      	ldr	r3, [pc, #744]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cce:	2101      	movs	r1, #1
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	621a      	str	r2, [r3, #32]
 8001cd4:	4bb8      	ldr	r3, [pc, #736]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	4bb7      	ldr	r3, [pc, #732]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cda:	2104      	movs	r1, #4
 8001cdc:	438a      	bics	r2, r1
 8001cde:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d014      	beq.n	8001d12 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce8:	f7ff f8b6 	bl	8000e58 <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	e009      	b.n	8001d06 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7ff f8b1 	bl	8000e58 <HAL_GetTick>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4aaf      	ldr	r2, [pc, #700]	; (8001fbc <HAL_RCC_OscConfig+0x680>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e19a      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d06:	4bac      	ldr	r3, [pc, #688]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x3b6>
 8001d10:	e013      	b.n	8001d3a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff f8a1 	bl	8000e58 <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1a:	e009      	b.n	8001d30 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f89c 	bl	8000e58 <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4aa5      	ldr	r2, [pc, #660]	; (8001fbc <HAL_RCC_OscConfig+0x680>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e185      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	4ba1      	ldr	r3, [pc, #644]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	2202      	movs	r2, #2
 8001d36:	4013      	ands	r3, r2
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d3a:	231f      	movs	r3, #31
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d44:	4b9c      	ldr	r3, [pc, #624]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d46:	69da      	ldr	r2, [r3, #28]
 8001d48:	4b9b      	ldr	r3, [pc, #620]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d4a:	499d      	ldr	r1, [pc, #628]	; (8001fc0 <HAL_RCC_OscConfig+0x684>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2210      	movs	r2, #16
 8001d56:	4013      	ands	r3, r2
 8001d58:	d063      	beq.n	8001e22 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d12a      	bne.n	8001db8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d62:	4b95      	ldr	r3, [pc, #596]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d66:	4b94      	ldr	r3, [pc, #592]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d68:	2104      	movs	r1, #4
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d6e:	4b92      	ldr	r3, [pc, #584]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d72:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	430a      	orrs	r2, r1
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff f86d 	bl	8000e58 <HAL_GetTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d84:	f7ff f868 	bl	8000e58 <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e152      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d96:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d0f1      	beq.n	8001d84 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001da0:	4b85      	ldr	r3, [pc, #532]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	22f8      	movs	r2, #248	; 0xf8
 8001da6:	4393      	bics	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	00da      	lsls	r2, r3, #3
 8001db0:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	635a      	str	r2, [r3, #52]	; 0x34
 8001db6:	e034      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	3305      	adds	r3, #5
 8001dbe:	d111      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001dc0:	4b7d      	ldr	r3, [pc, #500]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc4:	4b7c      	ldr	r3, [pc, #496]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	438a      	bics	r2, r1
 8001dca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dcc:	4b7a      	ldr	r3, [pc, #488]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd0:	22f8      	movs	r2, #248	; 0xf8
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	00da      	lsls	r2, r3, #3
 8001ddc:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001dde:	430a      	orrs	r2, r1
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34
 8001de2:	e01e      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001de4:	4b74      	ldr	r3, [pc, #464]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de8:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001dea:	2104      	movs	r1, #4
 8001dec:	430a      	orrs	r2, r1
 8001dee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001df0:	4b71      	ldr	r3, [pc, #452]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df4:	4b70      	ldr	r3, [pc, #448]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001df6:	2101      	movs	r1, #1
 8001df8:	438a      	bics	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7ff f82c 	bl	8000e58 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e06:	f7ff f827 	bl	8000e58 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e111      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e18:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d1f1      	bne.n	8001e06 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2220      	movs	r2, #32
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d05c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e2c:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	220c      	movs	r2, #12
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b0c      	cmp	r3, #12
 8001e36:	d00e      	beq.n	8001e56 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e38:	4b5f      	ldr	r3, [pc, #380]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d114      	bne.n	8001e6e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e44:	4b5c      	ldr	r3, [pc, #368]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	23c0      	movs	r3, #192	; 0xc0
 8001e4a:	025b      	lsls	r3, r3, #9
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	23c0      	movs	r3, #192	; 0xc0
 8001e50:	025b      	lsls	r3, r3, #9
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d10b      	bne.n	8001e6e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001e56:	4b58      	ldr	r3, [pc, #352]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	025b      	lsls	r3, r3, #9
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d040      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x5a8>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d03c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0e6      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01b      	beq.n	8001eae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e76:	4b50      	ldr	r3, [pc, #320]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e7a:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e7c:	2180      	movs	r1, #128	; 0x80
 8001e7e:	0249      	lsls	r1, r1, #9
 8001e80:	430a      	orrs	r2, r1
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe ffe8 	bl	8000e58 <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e8e:	f7fe ffe3 	bl	8000e58 <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0cd      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ea0:	4b45      	ldr	r3, [pc, #276]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	025b      	lsls	r3, r3, #9
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x552>
 8001eac:	e01b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001eae:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001eb4:	4943      	ldr	r1, [pc, #268]	; (8001fc4 <HAL_RCC_OscConfig+0x688>)
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7fe ffcd 	bl	8000e58 <HAL_GetTick>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ec4:	f7fe ffc8 	bl	8000e58 <HAL_GetTick>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e0b2      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	025b      	lsls	r3, r3, #9
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x588>
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ee4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d100      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5b4>
 8001eee:	e0a4      	b.n	800203a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef0:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	220c      	movs	r2, #12
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d100      	bne.n	8001efe <HAL_RCC_OscConfig+0x5c2>
 8001efc:	e078      	b.n	8001ff0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d14c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f0c:	492e      	ldr	r1, [pc, #184]	; (8001fc8 <HAL_RCC_OscConfig+0x68c>)
 8001f0e:	400a      	ands	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe ffa1 	bl	8000e58 <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7fe ff9c 	bl	8000e58 <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e086      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	049b      	lsls	r3, r3, #18
 8001f36:	4013      	ands	r3, r2
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	220f      	movs	r2, #15
 8001f40:	4393      	bics	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_RCC_OscConfig+0x690>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	431a      	orrs	r2, r3
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	0449      	lsls	r1, r1, #17
 8001f72:	430a      	orrs	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7fe ff6f 	bl	8000e58 <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7fe ff6a 	bl	8000e58 <HAL_GetTick>
 8001f84:	0002      	movs	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e054      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	049b      	lsls	r3, r3, #18
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x644>
 8001f9e:	e04c      	b.n	800203a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <HAL_RCC_OscConfig+0x68c>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7fe ff54 	bl	8000e58 <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x6a6>
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	00001388 	.word	0x00001388
 8001fc0:	efffffff 	.word	0xefffffff
 8001fc4:	fffeffff 	.word	0xfffeffff
 8001fc8:	feffffff 	.word	0xfeffffff
 8001fcc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7fe ff42 	bl	8000e58 <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e02c      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_RCC_OscConfig+0x708>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	049b      	lsls	r3, r3, #18
 8001fea:	4013      	ands	r3, r2
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x694>
 8001fee:	e024      	b.n	800203a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e01f      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_RCC_OscConfig+0x708>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCC_OscConfig+0x708>)
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	23c0      	movs	r3, #192	; 0xc0
 800200c:	025b      	lsls	r3, r3, #9
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	429a      	cmp	r2, r3
 8002016:	d10e      	bne.n	8002036 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	220f      	movs	r2, #15
 800201c:	401a      	ands	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d107      	bne.n	8002036 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	23f0      	movs	r3, #240	; 0xf0
 800202a:	039b      	lsls	r3, r3, #14
 800202c:	401a      	ands	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b008      	add	sp, #32
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000

08002048 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0bf      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d911      	bls.n	800208e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b5e      	ldr	r3, [pc, #376]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	4393      	bics	r3, r2
 8002072:	0019      	movs	r1, r3
 8002074:	4b5b      	ldr	r3, [pc, #364]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	4013      	ands	r3, r2
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d001      	beq.n	800208e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0a6      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2202      	movs	r2, #2
 8002094:	4013      	ands	r3, r2
 8002096:	d015      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2204      	movs	r2, #4
 800209e:	4013      	ands	r3, r2
 80020a0:	d006      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020a2:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80020a8:	21e0      	movs	r1, #224	; 0xe0
 80020aa:	00c9      	lsls	r1, r1, #3
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b4d      	ldr	r3, [pc, #308]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	22f0      	movs	r2, #240	; 0xf0
 80020b6:	4393      	bics	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	4b4a      	ldr	r3, [pc, #296]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	d04c      	beq.n	8002168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b44      	ldr	r3, [pc, #272]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	029b      	lsls	r3, r3, #10
 80020de:	4013      	ands	r3, r2
 80020e0:	d120      	bne.n	8002124 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e07a      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	049b      	lsls	r3, r3, #18
 80020f6:	4013      	ands	r3, r2
 80020f8:	d114      	bne.n	8002124 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06e      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002106:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 8002108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	4013      	ands	r3, r2
 8002110:	d108      	bne.n	8002124 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e062      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2202      	movs	r2, #2
 800211c:	4013      	ands	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e05b      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002124:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2203      	movs	r2, #3
 800212a:	4393      	bics	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7fe fe8e 	bl	8000e58 <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002140:	e009      	b.n	8002156 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002142:	f7fe fe89 	bl	8000e58 <HAL_GetTick>
 8002146:	0002      	movs	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	4a27      	ldr	r2, [pc, #156]	; (80021ec <HAL_RCC_ClockConfig+0x1a4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e042      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	220c      	movs	r2, #12
 800215c:	401a      	ands	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ec      	bne.n	8002142 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2201      	movs	r2, #1
 800216e:	4013      	ands	r3, r2
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d211      	bcs.n	800219a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	4393      	bics	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2201      	movs	r2, #1
 800218e:	4013      	ands	r3, r2
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d001      	beq.n	800219a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e020      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2204      	movs	r2, #4
 80021a0:	4013      	ands	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a11      	ldr	r2, [pc, #68]	; (80021f0 <HAL_RCC_ClockConfig+0x1a8>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021b8:	f000 f820 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80021bc:	0001      	movs	r1, r0
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	220f      	movs	r2, #15
 80021c6:	4013      	ands	r3, r2
 80021c8:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <HAL_RCC_ClockConfig+0x1ac>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	000a      	movs	r2, r1
 80021ce:	40da      	lsrs	r2, r3
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1b0>)
 80021d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7fe fdf9 	bl	8000dcc <HAL_InitTick>
  
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b004      	add	sp, #16
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	00001388 	.word	0x00001388
 80021f0:	fffff8ff 	.word	0xfffff8ff
 80021f4:	08003618 	.word	0x08003618
 80021f8:	20000000 	.word	0x20000000

080021fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b08f      	sub	sp, #60	; 0x3c
 8002200:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002202:	2314      	movs	r3, #20
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	4a37      	ldr	r2, [pc, #220]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002208:	ca13      	ldmia	r2!, {r0, r1, r4}
 800220a:	c313      	stmia	r3!, {r0, r1, r4}
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	4a35      	ldr	r2, [pc, #212]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xec>)
 8002214:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002216:	c313      	stmia	r3!, {r0, r1, r4}
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002220:	2300      	movs	r3, #0
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
 8002224:	2300      	movs	r3, #0
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002230:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <HAL_RCC_GetSysClockFreq+0xf0>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002238:	220c      	movs	r2, #12
 800223a:	4013      	ands	r3, r2
 800223c:	2b08      	cmp	r3, #8
 800223e:	d006      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x52>
 8002240:	2b0c      	cmp	r3, #12
 8002242:	d043      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0xd0>
 8002244:	2b04      	cmp	r3, #4
 8002246:	d144      	bne.n	80022d2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800224a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800224c:	e044      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	220f      	movs	r2, #15
 8002254:	4013      	ands	r3, r2
 8002256:	2214      	movs	r2, #20
 8002258:	18ba      	adds	r2, r7, r2
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_RCC_GetSysClockFreq+0xf0>)
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	220f      	movs	r2, #15
 8002264:	4013      	ands	r3, r2
 8002266:	1d3a      	adds	r2, r7, #4
 8002268:	5cd3      	ldrb	r3, [r2, r3]
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800226c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226e:	23c0      	movs	r3, #192	; 0xc0
 8002270:	025b      	lsls	r3, r3, #9
 8002272:	401a      	ands	r2, r3
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	025b      	lsls	r3, r3, #9
 8002278:	429a      	cmp	r2, r3
 800227a:	d109      	bne.n	8002290 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800227c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800227e:	481c      	ldr	r0, [pc, #112]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002280:	f7fd ff4a 	bl	8000118 <__udivsi3>
 8002284:	0003      	movs	r3, r0
 8002286:	001a      	movs	r2, r3
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	4353      	muls	r3, r2
 800228c:	637b      	str	r3, [r7, #52]	; 0x34
 800228e:	e01a      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002292:	23c0      	movs	r3, #192	; 0xc0
 8002294:	025b      	lsls	r3, r3, #9
 8002296:	401a      	ands	r2, r3
 8002298:	23c0      	movs	r3, #192	; 0xc0
 800229a:	025b      	lsls	r3, r3, #9
 800229c:	429a      	cmp	r2, r3
 800229e:	d109      	bne.n	80022b4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022a2:	4814      	ldr	r0, [pc, #80]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022a4:	f7fd ff38 	bl	8000118 <__udivsi3>
 80022a8:	0003      	movs	r3, r0
 80022aa:	001a      	movs	r2, r3
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	4353      	muls	r3, r2
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022b6:	480e      	ldr	r0, [pc, #56]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022b8:	f7fd ff2e 	bl	8000118 <__udivsi3>
 80022bc:	0003      	movs	r3, r0
 80022be:	001a      	movs	r2, r3
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	4353      	muls	r3, r2
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80022c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022ca:	e005      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022d0:	e002      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022da:	0018      	movs	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	b00f      	add	sp, #60	; 0x3c
 80022e0:	bd90      	pop	{r4, r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	08003538 	.word	0x08003538
 80022e8:	08003548 	.word	0x08003548
 80022ec:	40021000 	.word	0x40021000
 80022f0:	007a1200 	.word	0x007a1200
 80022f4:	02dc6c00 	.word	0x02dc6c00

080022f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022fc:	4b02      	ldr	r3, [pc, #8]	; (8002308 <HAL_RCC_GetHCLKFreq+0x10>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	20000000 	.word	0x20000000

0800230c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002310:	f7ff fff2 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 8002314:	0001      	movs	r1, r0
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	2207      	movs	r2, #7
 800231e:	4013      	ands	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002322:	5cd3      	ldrb	r3, [r2, r3]
 8002324:	40d9      	lsrs	r1, r3
 8002326:	000b      	movs	r3, r1
}    
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	40021000 	.word	0x40021000
 8002334:	08003628 	.word	0x08003628

08002338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	025b      	lsls	r3, r3, #9
 8002350:	4013      	ands	r3, r2
 8002352:	d100      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002354:	e08f      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002356:	2317      	movs	r3, #23
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b67      	ldr	r3, [pc, #412]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	055b      	lsls	r3, r3, #21
 8002366:	4013      	ands	r3, r2
 8002368:	d111      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b64      	ldr	r3, [pc, #400]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002370:	2180      	movs	r1, #128	; 0x80
 8002372:	0549      	lsls	r1, r1, #21
 8002374:	430a      	orrs	r2, r1
 8002376:	61da      	str	r2, [r3, #28]
 8002378:	4b60      	ldr	r3, [pc, #384]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	055b      	lsls	r3, r3, #21
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002386:	2317      	movs	r3, #23
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4013      	ands	r3, r2
 8002398:	d11a      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239a:	4b59      	ldr	r3, [pc, #356]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4b58      	ldr	r3, [pc, #352]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	0049      	lsls	r1, r1, #1
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a8:	f7fe fd56 	bl	8000e58 <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	e008      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b2:	f7fe fd51 	bl	8000e58 <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	; 0x64
 80023be:	d901      	bls.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e097      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c4:	4b4e      	ldr	r3, [pc, #312]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4013      	ands	r3, r2
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023d0:	4b4a      	ldr	r3, [pc, #296]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80023d2:	6a1a      	ldr	r2, [r3, #32]
 80023d4:	23c0      	movs	r3, #192	; 0xc0
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d034      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	23c0      	movs	r3, #192	; 0xc0
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4013      	ands	r3, r2
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d02c      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023f2:	4b42      	ldr	r3, [pc, #264]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a43      	ldr	r2, [pc, #268]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023fc:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80023fe:	6a1a      	ldr	r2, [r3, #32]
 8002400:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002402:	2180      	movs	r1, #128	; 0x80
 8002404:	0249      	lsls	r1, r1, #9
 8002406:	430a      	orrs	r2, r1
 8002408:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800240a:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002410:	493d      	ldr	r1, [pc, #244]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002412:	400a      	ands	r2, r1
 8002414:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	4013      	ands	r3, r2
 8002422:	d013      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe fd18 	bl	8000e58 <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	e009      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe fd13 	bl	8000e58 <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	4a34      	ldr	r2, [pc, #208]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e058      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002442:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	2202      	movs	r2, #2
 8002448:	4013      	ands	r3, r2
 800244a:	d0f0      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800244c:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a2c      	ldr	r2, [pc, #176]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	4b28      	ldr	r3, [pc, #160]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800245c:	430a      	orrs	r2, r1
 800245e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002460:	2317      	movs	r3, #23
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d105      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002470:	4927      	ldr	r1, [pc, #156]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002472:	400a      	ands	r2, r1
 8002474:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2201      	movs	r2, #1
 800247c:	4013      	ands	r3, r2
 800247e:	d009      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002480:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	2203      	movs	r2, #3
 8002486:	4393      	bics	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002490:	430a      	orrs	r2, r1
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2220      	movs	r2, #32
 800249a:	4013      	ands	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	2210      	movs	r2, #16
 80024a4:	4393      	bics	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	029b      	lsls	r3, r3, #10
 80024ba:	4013      	ands	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	4393      	bics	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024ce:	430a      	orrs	r2, r1
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4013      	ands	r3, r2
 80024dc:	d009      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	2240      	movs	r2, #64	; 0x40
 80024e4:	4393      	bics	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024ee:	430a      	orrs	r2, r1
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b006      	add	sp, #24
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	40007000 	.word	0x40007000
 8002504:	fffffcff 	.word	0xfffffcff
 8002508:	fffeffff 	.word	0xfffeffff
 800250c:	00001388 	.word	0x00001388
 8002510:	efffffff 	.word	0xefffffff

08002514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e044      	b.n	80025b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2274      	movs	r2, #116	; 0x74
 8002532:	2100      	movs	r1, #0
 8002534:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0018      	movs	r0, r3
 800253a:	f7fe fb4f 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2224      	movs	r2, #36	; 0x24
 8002542:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2101      	movs	r1, #1
 8002550:	438a      	bics	r2, r1
 8002552:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	0018      	movs	r0, r3
 8002558:	f000 f8da 	bl	8002710 <UART_SetConfig>
 800255c:	0003      	movs	r3, r0
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e024      	b.n	80025b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	0018      	movs	r0, r3
 8002572:	f000 fa0b 	bl	800298c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	490d      	ldr	r1, [pc, #52]	; (80025b8 <HAL_UART_Init+0xa4>)
 8002582:	400a      	ands	r2, r1
 8002584:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	212a      	movs	r1, #42	; 0x2a
 8002592:	438a      	bics	r2, r1
 8002594:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2101      	movs	r1, #1
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f000 faa3 	bl	8002af4 <UART_CheckIdleState>
 80025ae:	0003      	movs	r3, r0
}
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	ffffb7ff 	.word	0xffffb7ff

080025bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	1dbb      	adds	r3, r7, #6
 80025ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d000      	beq.n	80025d6 <HAL_UART_Transmit+0x1a>
 80025d4:	e096      	b.n	8002704 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_UART_Transmit+0x28>
 80025dc:	1dbb      	adds	r3, r7, #6
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e08e      	b.n	8002706 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	015b      	lsls	r3, r3, #5
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d109      	bne.n	8002608 <HAL_UART_Transmit+0x4c>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2201      	movs	r2, #1
 8002600:	4013      	ands	r3, r2
 8002602:	d001      	beq.n	8002608 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e07e      	b.n	8002706 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2274      	movs	r2, #116	; 0x74
 800260c:	5c9b      	ldrb	r3, [r3, r2]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_UART_Transmit+0x5a>
 8002612:	2302      	movs	r3, #2
 8002614:	e077      	b.n	8002706 <HAL_UART_Transmit+0x14a>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2274      	movs	r2, #116	; 0x74
 800261a:	2101      	movs	r1, #1
 800261c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	2100      	movs	r1, #0
 8002624:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2221      	movs	r2, #33	; 0x21
 800262a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800262c:	f7fe fc14 	bl	8000e58 <HAL_GetTick>
 8002630:	0003      	movs	r3, r0
 8002632:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1dba      	adds	r2, r7, #6
 8002638:	2150      	movs	r1, #80	; 0x50
 800263a:	8812      	ldrh	r2, [r2, #0]
 800263c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1dba      	adds	r2, r7, #6
 8002642:	2152      	movs	r1, #82	; 0x52
 8002644:	8812      	ldrh	r2, [r2, #0]
 8002646:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	015b      	lsls	r3, r3, #5
 8002650:	429a      	cmp	r2, r3
 8002652:	d108      	bne.n	8002666 <HAL_UART_Transmit+0xaa>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d104      	bne.n	8002666 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	e003      	b.n	800266e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2274      	movs	r2, #116	; 0x74
 8002672:	2100      	movs	r1, #0
 8002674:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002676:	e02d      	b.n	80026d4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	0013      	movs	r3, r2
 8002682:	2200      	movs	r2, #0
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	f000 fa7f 	bl	8002b88 <UART_WaitOnFlagUntilTimeout>
 800268a:	1e03      	subs	r3, r0, #0
 800268c:	d001      	beq.n	8002692 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e039      	b.n	8002706 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	881a      	ldrh	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	05d2      	lsls	r2, r2, #23
 80026a2:	0dd2      	lsrs	r2, r2, #23
 80026a4:	b292      	uxth	r2, r2
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	3302      	adds	r3, #2
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	e008      	b.n	80026c2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b292      	uxth	r2, r2
 80026ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3301      	adds	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2252      	movs	r2, #82	; 0x52
 80026c6:	5a9b      	ldrh	r3, [r3, r2]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b299      	uxth	r1, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2252      	movs	r2, #82	; 0x52
 80026d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2252      	movs	r2, #82	; 0x52
 80026d8:	5a9b      	ldrh	r3, [r3, r2]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1cb      	bne.n	8002678 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	0013      	movs	r3, r2
 80026ea:	2200      	movs	r2, #0
 80026ec:	2140      	movs	r1, #64	; 0x40
 80026ee:	f000 fa4b 	bl	8002b88 <UART_WaitOnFlagUntilTimeout>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d001      	beq.n	80026fa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e005      	b.n	8002706 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002704:	2302      	movs	r3, #2
  }
}
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b008      	add	sp, #32
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002718:	231e      	movs	r3, #30
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a8b      	ldr	r2, [pc, #556]	; (800296c <UART_SetConfig+0x25c>)
 8002740:	4013      	ands	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a86      	ldr	r2, [pc, #536]	; (8002970 <UART_SetConfig+0x260>)
 8002756:	4013      	ands	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a7d      	ldr	r2, [pc, #500]	; (8002974 <UART_SetConfig+0x264>)
 800277e:	4013      	ands	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	430a      	orrs	r2, r1
 800278a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a79      	ldr	r2, [pc, #484]	; (8002978 <UART_SetConfig+0x268>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d125      	bne.n	80027e2 <UART_SetConfig+0xd2>
 8002796:	4b79      	ldr	r3, [pc, #484]	; (800297c <UART_SetConfig+0x26c>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	2203      	movs	r2, #3
 800279c:	4013      	ands	r3, r2
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d00f      	beq.n	80027c2 <UART_SetConfig+0xb2>
 80027a2:	d304      	bcc.n	80027ae <UART_SetConfig+0x9e>
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d011      	beq.n	80027cc <UART_SetConfig+0xbc>
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d005      	beq.n	80027b8 <UART_SetConfig+0xa8>
 80027ac:	e013      	b.n	80027d6 <UART_SetConfig+0xc6>
 80027ae:	231f      	movs	r3, #31
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e022      	b.n	80027fe <UART_SetConfig+0xee>
 80027b8:	231f      	movs	r3, #31
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2202      	movs	r2, #2
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e01d      	b.n	80027fe <UART_SetConfig+0xee>
 80027c2:	231f      	movs	r3, #31
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2204      	movs	r2, #4
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	e018      	b.n	80027fe <UART_SetConfig+0xee>
 80027cc:	231f      	movs	r3, #31
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	2208      	movs	r2, #8
 80027d2:	701a      	strb	r2, [r3, #0]
 80027d4:	e013      	b.n	80027fe <UART_SetConfig+0xee>
 80027d6:	231f      	movs	r3, #31
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2210      	movs	r2, #16
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	e00d      	b.n	80027fe <UART_SetConfig+0xee>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a66      	ldr	r2, [pc, #408]	; (8002980 <UART_SetConfig+0x270>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d104      	bne.n	80027f6 <UART_SetConfig+0xe6>
 80027ec:	231f      	movs	r3, #31
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
 80027f4:	e003      	b.n	80027fe <UART_SetConfig+0xee>
 80027f6:	231f      	movs	r3, #31
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	2210      	movs	r2, #16
 80027fc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	429a      	cmp	r2, r3
 8002808:	d15c      	bne.n	80028c4 <UART_SetConfig+0x1b4>
  {
    switch (clocksource)
 800280a:	231f      	movs	r3, #31
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d00d      	beq.n	8002830 <UART_SetConfig+0x120>
 8002814:	dc02      	bgt.n	800281c <UART_SetConfig+0x10c>
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <UART_SetConfig+0x116>
 800281a:	e015      	b.n	8002848 <UART_SetConfig+0x138>
 800281c:	2b04      	cmp	r3, #4
 800281e:	d00a      	beq.n	8002836 <UART_SetConfig+0x126>
 8002820:	2b08      	cmp	r3, #8
 8002822:	d00d      	beq.n	8002840 <UART_SetConfig+0x130>
 8002824:	e010      	b.n	8002848 <UART_SetConfig+0x138>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002826:	f7ff fd71 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 800282a:	0003      	movs	r3, r0
 800282c:	61bb      	str	r3, [r7, #24]
        break;
 800282e:	e012      	b.n	8002856 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002830:	4b54      	ldr	r3, [pc, #336]	; (8002984 <UART_SetConfig+0x274>)
 8002832:	61bb      	str	r3, [r7, #24]
        break;
 8002834:	e00f      	b.n	8002856 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002836:	f7ff fce1 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 800283a:	0003      	movs	r3, r0
 800283c:	61bb      	str	r3, [r7, #24]
        break;
 800283e:	e00a      	b.n	8002856 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	61bb      	str	r3, [r7, #24]
        break;
 8002846:	e006      	b.n	8002856 <UART_SetConfig+0x146>
      default:
        pclk = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800284c:	231e      	movs	r3, #30
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
        break;
 8002854:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d100      	bne.n	800285e <UART_SetConfig+0x14e>
 800285c:	e079      	b.n	8002952 <UART_SetConfig+0x242>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	005a      	lsls	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	18d2      	adds	r2, r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	0019      	movs	r1, r3
 8002870:	0010      	movs	r0, r2
 8002872:	f7fd fc51 	bl	8000118 <__udivsi3>
 8002876:	0003      	movs	r3, r0
 8002878:	b29b      	uxth	r3, r3
 800287a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b0f      	cmp	r3, #15
 8002880:	d91b      	bls.n	80028ba <UART_SetConfig+0x1aa>
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4a40      	ldr	r2, [pc, #256]	; (8002988 <UART_SetConfig+0x278>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d817      	bhi.n	80028ba <UART_SetConfig+0x1aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	b29a      	uxth	r2, r3
 800288e:	200e      	movs	r0, #14
 8002890:	183b      	adds	r3, r7, r0
 8002892:	210f      	movs	r1, #15
 8002894:	438a      	bics	r2, r1
 8002896:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	b29b      	uxth	r3, r3
 800289e:	2207      	movs	r2, #7
 80028a0:	4013      	ands	r3, r2
 80028a2:	b299      	uxth	r1, r3
 80028a4:	183b      	adds	r3, r7, r0
 80028a6:	183a      	adds	r2, r7, r0
 80028a8:	8812      	ldrh	r2, [r2, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	183a      	adds	r2, r7, r0
 80028b4:	8812      	ldrh	r2, [r2, #0]
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	e04b      	b.n	8002952 <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 80028ba:	231e      	movs	r3, #30
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e046      	b.n	8002952 <UART_SetConfig+0x242>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028c4:	231f      	movs	r3, #31
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d00d      	beq.n	80028ea <UART_SetConfig+0x1da>
 80028ce:	dc02      	bgt.n	80028d6 <UART_SetConfig+0x1c6>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <UART_SetConfig+0x1d0>
 80028d4:	e015      	b.n	8002902 <UART_SetConfig+0x1f2>
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d00a      	beq.n	80028f0 <UART_SetConfig+0x1e0>
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d00d      	beq.n	80028fa <UART_SetConfig+0x1ea>
 80028de:	e010      	b.n	8002902 <UART_SetConfig+0x1f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028e0:	f7ff fd14 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 80028e4:	0003      	movs	r3, r0
 80028e6:	61bb      	str	r3, [r7, #24]
        break;
 80028e8:	e012      	b.n	8002910 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028ea:	4b26      	ldr	r3, [pc, #152]	; (8002984 <UART_SetConfig+0x274>)
 80028ec:	61bb      	str	r3, [r7, #24]
        break;
 80028ee:	e00f      	b.n	8002910 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028f0:	f7ff fc84 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80028f4:	0003      	movs	r3, r0
 80028f6:	61bb      	str	r3, [r7, #24]
        break;
 80028f8:	e00a      	b.n	8002910 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	61bb      	str	r3, [r7, #24]
        break;
 8002900:	e006      	b.n	8002910 <UART_SetConfig+0x200>
      default:
        pclk = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002906:	231e      	movs	r3, #30
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
        break;
 800290e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01d      	beq.n	8002952 <UART_SetConfig+0x242>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	085a      	lsrs	r2, r3, #1
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	18d2      	adds	r2, r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	0019      	movs	r1, r3
 8002926:	0010      	movs	r0, r2
 8002928:	f7fd fbf6 	bl	8000118 <__udivsi3>
 800292c:	0003      	movs	r3, r0
 800292e:	b29b      	uxth	r3, r3
 8002930:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b0f      	cmp	r3, #15
 8002936:	d908      	bls.n	800294a <UART_SetConfig+0x23a>
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4a13      	ldr	r2, [pc, #76]	; (8002988 <UART_SetConfig+0x278>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d804      	bhi.n	800294a <UART_SetConfig+0x23a>
      {
        huart->Instance->BRR = usartdiv;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	e003      	b.n	8002952 <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 800294a:	231e      	movs	r3, #30
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800295e:	231e      	movs	r3, #30
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	781b      	ldrb	r3, [r3, #0]
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b008      	add	sp, #32
 800296a:	bd80      	pop	{r7, pc}
 800296c:	efff69f3 	.word	0xefff69f3
 8002970:	ffffcfff 	.word	0xffffcfff
 8002974:	fffff4ff 	.word	0xfffff4ff
 8002978:	40013800 	.word	0x40013800
 800297c:	40021000 	.word	0x40021000
 8002980:	40004400 	.word	0x40004400
 8002984:	007a1200 	.word	0x007a1200
 8002988:	0000ffff 	.word	0x0000ffff

0800298c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	2201      	movs	r2, #1
 800299a:	4013      	ands	r3, r2
 800299c:	d00b      	beq.n	80029b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a4a      	ldr	r2, [pc, #296]	; (8002ad0 <UART_AdvFeatureConfig+0x144>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d00b      	beq.n	80029d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4a43      	ldr	r2, [pc, #268]	; (8002ad4 <UART_AdvFeatureConfig+0x148>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	0019      	movs	r1, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2204      	movs	r2, #4
 80029de:	4013      	ands	r3, r2
 80029e0:	d00b      	beq.n	80029fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a3b      	ldr	r2, [pc, #236]	; (8002ad8 <UART_AdvFeatureConfig+0x14c>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	0019      	movs	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2208      	movs	r2, #8
 8002a00:	4013      	ands	r3, r2
 8002a02:	d00b      	beq.n	8002a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a34      	ldr	r2, [pc, #208]	; (8002adc <UART_AdvFeatureConfig+0x150>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	2210      	movs	r2, #16
 8002a22:	4013      	ands	r3, r2
 8002a24:	d00b      	beq.n	8002a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ae0 <UART_AdvFeatureConfig+0x154>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2220      	movs	r2, #32
 8002a44:	4013      	ands	r3, r2
 8002a46:	d00b      	beq.n	8002a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4a25      	ldr	r2, [pc, #148]	; (8002ae4 <UART_AdvFeatureConfig+0x158>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	4013      	ands	r3, r2
 8002a68:	d01d      	beq.n	8002aa6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <UART_AdvFeatureConfig+0x15c>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	035b      	lsls	r3, r3, #13
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d10b      	bne.n	8002aa6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <UART_AdvFeatureConfig+0x160>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	4013      	ands	r3, r2
 8002aae:	d00b      	beq.n	8002ac8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <UART_AdvFeatureConfig+0x164>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	0019      	movs	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
  }
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	fffdffff 	.word	0xfffdffff
 8002ad4:	fffeffff 	.word	0xfffeffff
 8002ad8:	fffbffff 	.word	0xfffbffff
 8002adc:	ffff7fff 	.word	0xffff7fff
 8002ae0:	ffffefff 	.word	0xffffefff
 8002ae4:	ffffdfff 	.word	0xffffdfff
 8002ae8:	ffefffff 	.word	0xffefffff
 8002aec:	ff9fffff 	.word	0xff9fffff
 8002af0:	fff7ffff 	.word	0xfff7ffff

08002af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2280      	movs	r2, #128	; 0x80
 8002b00:	2100      	movs	r1, #0
 8002b02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b04:	f7fe f9a8 	bl	8000e58 <HAL_GetTick>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2208      	movs	r2, #8
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d10d      	bne.n	8002b36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	0399      	lsls	r1, r3, #14
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <UART_CheckIdleState+0x90>)
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	0013      	movs	r3, r2
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f000 f82d 	bl	8002b88 <UART_WaitOnFlagUntilTimeout>
 8002b2e:	1e03      	subs	r3, r0, #0
 8002b30:	d001      	beq.n	8002b36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e022      	b.n	8002b7c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d10d      	bne.n	8002b60 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	03d9      	lsls	r1, r3, #15
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <UART_CheckIdleState+0x90>)
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	0013      	movs	r3, r2
 8002b52:	2200      	movs	r2, #0
 8002b54:	f000 f818 	bl	8002b88 <UART_WaitOnFlagUntilTimeout>
 8002b58:	1e03      	subs	r3, r0, #0
 8002b5a:	d001      	beq.n	8002b60 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e00d      	b.n	8002b7c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2274      	movs	r2, #116	; 0x74
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b004      	add	sp, #16
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	01ffffff 	.word	0x01ffffff

08002b88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	1dfb      	adds	r3, r7, #7
 8002b96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b98:	e05e      	b.n	8002c58 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	d05b      	beq.n	8002c58 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba0:	f7fe f95a 	bl	8000e58 <HAL_GetTick>
 8002ba4:	0002      	movs	r2, r0
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d302      	bcc.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11b      	bne.n	8002bee <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	492f      	ldr	r1, [pc, #188]	; (8002c80 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002bc2:	400a      	ands	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	438a      	bics	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2274      	movs	r2, #116	; 0x74
 8002be6:	2100      	movs	r1, #0
 8002be8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e044      	b.n	8002c78 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d02e      	beq.n	8002c58 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69da      	ldr	r2, [r3, #28]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	401a      	ands	r2, r3
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d124      	bne.n	8002c58 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4917      	ldr	r1, [pc, #92]	; (8002c80 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002c24:	400a      	ands	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2101      	movs	r1, #1
 8002c34:	438a      	bics	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2280      	movs	r2, #128	; 0x80
 8002c48:	2120      	movs	r1, #32
 8002c4a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2274      	movs	r2, #116	; 0x74
 8002c50:	2100      	movs	r1, #0
 8002c52:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e00f      	b.n	8002c78 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	4013      	ands	r3, r2
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	425a      	negs	r2, r3
 8002c68:	4153      	adcs	r3, r2
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	001a      	movs	r2, r3
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d091      	beq.n	8002b9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b004      	add	sp, #16
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	fffffe5f 	.word	0xfffffe5f

08002c84 <__errno>:
 8002c84:	4b01      	ldr	r3, [pc, #4]	; (8002c8c <__errno+0x8>)
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	4770      	bx	lr
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	2000000c 	.word	0x2000000c

08002c90 <__libc_init_array>:
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	2600      	movs	r6, #0
 8002c94:	4d0c      	ldr	r5, [pc, #48]	; (8002cc8 <__libc_init_array+0x38>)
 8002c96:	4c0d      	ldr	r4, [pc, #52]	; (8002ccc <__libc_init_array+0x3c>)
 8002c98:	1b64      	subs	r4, r4, r5
 8002c9a:	10a4      	asrs	r4, r4, #2
 8002c9c:	42a6      	cmp	r6, r4
 8002c9e:	d109      	bne.n	8002cb4 <__libc_init_array+0x24>
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	f000 fc29 	bl	80034f8 <_init>
 8002ca6:	4d0a      	ldr	r5, [pc, #40]	; (8002cd0 <__libc_init_array+0x40>)
 8002ca8:	4c0a      	ldr	r4, [pc, #40]	; (8002cd4 <__libc_init_array+0x44>)
 8002caa:	1b64      	subs	r4, r4, r5
 8002cac:	10a4      	asrs	r4, r4, #2
 8002cae:	42a6      	cmp	r6, r4
 8002cb0:	d105      	bne.n	8002cbe <__libc_init_array+0x2e>
 8002cb2:	bd70      	pop	{r4, r5, r6, pc}
 8002cb4:	00b3      	lsls	r3, r6, #2
 8002cb6:	58eb      	ldr	r3, [r5, r3]
 8002cb8:	4798      	blx	r3
 8002cba:	3601      	adds	r6, #1
 8002cbc:	e7ee      	b.n	8002c9c <__libc_init_array+0xc>
 8002cbe:	00b3      	lsls	r3, r6, #2
 8002cc0:	58eb      	ldr	r3, [r5, r3]
 8002cc2:	4798      	blx	r3
 8002cc4:	3601      	adds	r6, #1
 8002cc6:	e7f2      	b.n	8002cae <__libc_init_array+0x1e>
 8002cc8:	08003664 	.word	0x08003664
 8002ccc:	08003664 	.word	0x08003664
 8002cd0:	08003664 	.word	0x08003664
 8002cd4:	08003668 	.word	0x08003668

08002cd8 <memset>:
 8002cd8:	0003      	movs	r3, r0
 8002cda:	1812      	adds	r2, r2, r0
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d100      	bne.n	8002ce2 <memset+0xa>
 8002ce0:	4770      	bx	lr
 8002ce2:	7019      	strb	r1, [r3, #0]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	e7f9      	b.n	8002cdc <memset+0x4>

08002ce8 <siprintf>:
 8002ce8:	b40e      	push	{r1, r2, r3}
 8002cea:	b500      	push	{lr}
 8002cec:	490b      	ldr	r1, [pc, #44]	; (8002d1c <siprintf+0x34>)
 8002cee:	b09c      	sub	sp, #112	; 0x70
 8002cf0:	ab1d      	add	r3, sp, #116	; 0x74
 8002cf2:	9002      	str	r0, [sp, #8]
 8002cf4:	9006      	str	r0, [sp, #24]
 8002cf6:	9107      	str	r1, [sp, #28]
 8002cf8:	9104      	str	r1, [sp, #16]
 8002cfa:	4809      	ldr	r0, [pc, #36]	; (8002d20 <siprintf+0x38>)
 8002cfc:	4909      	ldr	r1, [pc, #36]	; (8002d24 <siprintf+0x3c>)
 8002cfe:	cb04      	ldmia	r3!, {r2}
 8002d00:	9105      	str	r1, [sp, #20]
 8002d02:	6800      	ldr	r0, [r0, #0]
 8002d04:	a902      	add	r1, sp, #8
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	f000 f870 	bl	8002dec <_svfiprintf_r>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	9a02      	ldr	r2, [sp, #8]
 8002d10:	7013      	strb	r3, [r2, #0]
 8002d12:	b01c      	add	sp, #112	; 0x70
 8002d14:	bc08      	pop	{r3}
 8002d16:	b003      	add	sp, #12
 8002d18:	4718      	bx	r3
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	7fffffff 	.word	0x7fffffff
 8002d20:	2000000c 	.word	0x2000000c
 8002d24:	ffff0208 	.word	0xffff0208

08002d28 <__ssputs_r>:
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2a:	688e      	ldr	r6, [r1, #8]
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	0007      	movs	r7, r0
 8002d30:	000c      	movs	r4, r1
 8002d32:	9203      	str	r2, [sp, #12]
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	429e      	cmp	r6, r3
 8002d38:	d83c      	bhi.n	8002db4 <__ssputs_r+0x8c>
 8002d3a:	2390      	movs	r3, #144	; 0x90
 8002d3c:	898a      	ldrh	r2, [r1, #12]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	421a      	tst	r2, r3
 8002d42:	d034      	beq.n	8002dae <__ssputs_r+0x86>
 8002d44:	2503      	movs	r5, #3
 8002d46:	6909      	ldr	r1, [r1, #16]
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	1a5b      	subs	r3, r3, r1
 8002d4c:	9302      	str	r3, [sp, #8]
 8002d4e:	6963      	ldr	r3, [r4, #20]
 8002d50:	9802      	ldr	r0, [sp, #8]
 8002d52:	435d      	muls	r5, r3
 8002d54:	0feb      	lsrs	r3, r5, #31
 8002d56:	195d      	adds	r5, r3, r5
 8002d58:	9b01      	ldr	r3, [sp, #4]
 8002d5a:	106d      	asrs	r5, r5, #1
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	181b      	adds	r3, r3, r0
 8002d60:	42ab      	cmp	r3, r5
 8002d62:	d900      	bls.n	8002d66 <__ssputs_r+0x3e>
 8002d64:	001d      	movs	r5, r3
 8002d66:	0553      	lsls	r3, r2, #21
 8002d68:	d532      	bpl.n	8002dd0 <__ssputs_r+0xa8>
 8002d6a:	0029      	movs	r1, r5
 8002d6c:	0038      	movs	r0, r7
 8002d6e:	f000 fb23 	bl	80033b8 <_malloc_r>
 8002d72:	1e06      	subs	r6, r0, #0
 8002d74:	d109      	bne.n	8002d8a <__ssputs_r+0x62>
 8002d76:	230c      	movs	r3, #12
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	2340      	movs	r3, #64	; 0x40
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	89a2      	ldrh	r2, [r4, #12]
 8002d80:	4240      	negs	r0, r0
 8002d82:	4313      	orrs	r3, r2
 8002d84:	81a3      	strh	r3, [r4, #12]
 8002d86:	b005      	add	sp, #20
 8002d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d8a:	9a02      	ldr	r2, [sp, #8]
 8002d8c:	6921      	ldr	r1, [r4, #16]
 8002d8e:	f000 faac 	bl	80032ea <memcpy>
 8002d92:	89a3      	ldrh	r3, [r4, #12]
 8002d94:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <__ssputs_r+0xc0>)
 8002d96:	401a      	ands	r2, r3
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	81a3      	strh	r3, [r4, #12]
 8002d9e:	9b02      	ldr	r3, [sp, #8]
 8002da0:	6126      	str	r6, [r4, #16]
 8002da2:	18f6      	adds	r6, r6, r3
 8002da4:	6026      	str	r6, [r4, #0]
 8002da6:	6165      	str	r5, [r4, #20]
 8002da8:	9e01      	ldr	r6, [sp, #4]
 8002daa:	1aed      	subs	r5, r5, r3
 8002dac:	60a5      	str	r5, [r4, #8]
 8002dae:	9b01      	ldr	r3, [sp, #4]
 8002db0:	429e      	cmp	r6, r3
 8002db2:	d900      	bls.n	8002db6 <__ssputs_r+0x8e>
 8002db4:	9e01      	ldr	r6, [sp, #4]
 8002db6:	0032      	movs	r2, r6
 8002db8:	9903      	ldr	r1, [sp, #12]
 8002dba:	6820      	ldr	r0, [r4, #0]
 8002dbc:	f000 fa9e 	bl	80032fc <memmove>
 8002dc0:	68a3      	ldr	r3, [r4, #8]
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	1b9b      	subs	r3, r3, r6
 8002dc6:	60a3      	str	r3, [r4, #8]
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	199e      	adds	r6, r3, r6
 8002dcc:	6026      	str	r6, [r4, #0]
 8002dce:	e7da      	b.n	8002d86 <__ssputs_r+0x5e>
 8002dd0:	002a      	movs	r2, r5
 8002dd2:	0038      	movs	r0, r7
 8002dd4:	f000 fb4e 	bl	8003474 <_realloc_r>
 8002dd8:	1e06      	subs	r6, r0, #0
 8002dda:	d1e0      	bne.n	8002d9e <__ssputs_r+0x76>
 8002ddc:	6921      	ldr	r1, [r4, #16]
 8002dde:	0038      	movs	r0, r7
 8002de0:	f000 faa0 	bl	8003324 <_free_r>
 8002de4:	e7c7      	b.n	8002d76 <__ssputs_r+0x4e>
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	fffffb7f 	.word	0xfffffb7f

08002dec <_svfiprintf_r>:
 8002dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dee:	b0a1      	sub	sp, #132	; 0x84
 8002df0:	9003      	str	r0, [sp, #12]
 8002df2:	001d      	movs	r5, r3
 8002df4:	898b      	ldrh	r3, [r1, #12]
 8002df6:	000f      	movs	r7, r1
 8002df8:	0016      	movs	r6, r2
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	d511      	bpl.n	8002e22 <_svfiprintf_r+0x36>
 8002dfe:	690b      	ldr	r3, [r1, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10e      	bne.n	8002e22 <_svfiprintf_r+0x36>
 8002e04:	2140      	movs	r1, #64	; 0x40
 8002e06:	f000 fad7 	bl	80033b8 <_malloc_r>
 8002e0a:	6038      	str	r0, [r7, #0]
 8002e0c:	6138      	str	r0, [r7, #16]
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	d105      	bne.n	8002e1e <_svfiprintf_r+0x32>
 8002e12:	230c      	movs	r3, #12
 8002e14:	9a03      	ldr	r2, [sp, #12]
 8002e16:	3801      	subs	r0, #1
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	b021      	add	sp, #132	; 0x84
 8002e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e1e:	2340      	movs	r3, #64	; 0x40
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	2300      	movs	r3, #0
 8002e24:	ac08      	add	r4, sp, #32
 8002e26:	6163      	str	r3, [r4, #20]
 8002e28:	3320      	adds	r3, #32
 8002e2a:	7663      	strb	r3, [r4, #25]
 8002e2c:	3310      	adds	r3, #16
 8002e2e:	76a3      	strb	r3, [r4, #26]
 8002e30:	9507      	str	r5, [sp, #28]
 8002e32:	0035      	movs	r5, r6
 8002e34:	782b      	ldrb	r3, [r5, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <_svfiprintf_r+0x52>
 8002e3a:	2b25      	cmp	r3, #37	; 0x25
 8002e3c:	d146      	bne.n	8002ecc <_svfiprintf_r+0xe0>
 8002e3e:	1bab      	subs	r3, r5, r6
 8002e40:	9305      	str	r3, [sp, #20]
 8002e42:	d00c      	beq.n	8002e5e <_svfiprintf_r+0x72>
 8002e44:	0032      	movs	r2, r6
 8002e46:	0039      	movs	r1, r7
 8002e48:	9803      	ldr	r0, [sp, #12]
 8002e4a:	f7ff ff6d 	bl	8002d28 <__ssputs_r>
 8002e4e:	1c43      	adds	r3, r0, #1
 8002e50:	d100      	bne.n	8002e54 <_svfiprintf_r+0x68>
 8002e52:	e0ae      	b.n	8002fb2 <_svfiprintf_r+0x1c6>
 8002e54:	6962      	ldr	r2, [r4, #20]
 8002e56:	9b05      	ldr	r3, [sp, #20]
 8002e58:	4694      	mov	ip, r2
 8002e5a:	4463      	add	r3, ip
 8002e5c:	6163      	str	r3, [r4, #20]
 8002e5e:	782b      	ldrb	r3, [r5, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d100      	bne.n	8002e66 <_svfiprintf_r+0x7a>
 8002e64:	e0a5      	b.n	8002fb2 <_svfiprintf_r+0x1c6>
 8002e66:	2201      	movs	r2, #1
 8002e68:	2300      	movs	r3, #0
 8002e6a:	4252      	negs	r2, r2
 8002e6c:	6062      	str	r2, [r4, #4]
 8002e6e:	a904      	add	r1, sp, #16
 8002e70:	3254      	adds	r2, #84	; 0x54
 8002e72:	1852      	adds	r2, r2, r1
 8002e74:	1c6e      	adds	r6, r5, #1
 8002e76:	6023      	str	r3, [r4, #0]
 8002e78:	60e3      	str	r3, [r4, #12]
 8002e7a:	60a3      	str	r3, [r4, #8]
 8002e7c:	7013      	strb	r3, [r2, #0]
 8002e7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e80:	7831      	ldrb	r1, [r6, #0]
 8002e82:	2205      	movs	r2, #5
 8002e84:	4853      	ldr	r0, [pc, #332]	; (8002fd4 <_svfiprintf_r+0x1e8>)
 8002e86:	f000 fa25 	bl	80032d4 <memchr>
 8002e8a:	1c75      	adds	r5, r6, #1
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	d11f      	bne.n	8002ed0 <_svfiprintf_r+0xe4>
 8002e90:	6822      	ldr	r2, [r4, #0]
 8002e92:	06d3      	lsls	r3, r2, #27
 8002e94:	d504      	bpl.n	8002ea0 <_svfiprintf_r+0xb4>
 8002e96:	2353      	movs	r3, #83	; 0x53
 8002e98:	a904      	add	r1, sp, #16
 8002e9a:	185b      	adds	r3, r3, r1
 8002e9c:	2120      	movs	r1, #32
 8002e9e:	7019      	strb	r1, [r3, #0]
 8002ea0:	0713      	lsls	r3, r2, #28
 8002ea2:	d504      	bpl.n	8002eae <_svfiprintf_r+0xc2>
 8002ea4:	2353      	movs	r3, #83	; 0x53
 8002ea6:	a904      	add	r1, sp, #16
 8002ea8:	185b      	adds	r3, r3, r1
 8002eaa:	212b      	movs	r1, #43	; 0x2b
 8002eac:	7019      	strb	r1, [r3, #0]
 8002eae:	7833      	ldrb	r3, [r6, #0]
 8002eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8002eb2:	d016      	beq.n	8002ee2 <_svfiprintf_r+0xf6>
 8002eb4:	0035      	movs	r5, r6
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	200a      	movs	r0, #10
 8002eba:	68e3      	ldr	r3, [r4, #12]
 8002ebc:	782a      	ldrb	r2, [r5, #0]
 8002ebe:	1c6e      	adds	r6, r5, #1
 8002ec0:	3a30      	subs	r2, #48	; 0x30
 8002ec2:	2a09      	cmp	r2, #9
 8002ec4:	d94e      	bls.n	8002f64 <_svfiprintf_r+0x178>
 8002ec6:	2900      	cmp	r1, #0
 8002ec8:	d018      	beq.n	8002efc <_svfiprintf_r+0x110>
 8002eca:	e010      	b.n	8002eee <_svfiprintf_r+0x102>
 8002ecc:	3501      	adds	r5, #1
 8002ece:	e7b1      	b.n	8002e34 <_svfiprintf_r+0x48>
 8002ed0:	4b40      	ldr	r3, [pc, #256]	; (8002fd4 <_svfiprintf_r+0x1e8>)
 8002ed2:	6822      	ldr	r2, [r4, #0]
 8002ed4:	1ac0      	subs	r0, r0, r3
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	4083      	lsls	r3, r0
 8002eda:	4313      	orrs	r3, r2
 8002edc:	6023      	str	r3, [r4, #0]
 8002ede:	002e      	movs	r6, r5
 8002ee0:	e7ce      	b.n	8002e80 <_svfiprintf_r+0x94>
 8002ee2:	9b07      	ldr	r3, [sp, #28]
 8002ee4:	1d19      	adds	r1, r3, #4
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	9107      	str	r1, [sp, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db01      	blt.n	8002ef2 <_svfiprintf_r+0x106>
 8002eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ef0:	e004      	b.n	8002efc <_svfiprintf_r+0x110>
 8002ef2:	425b      	negs	r3, r3
 8002ef4:	60e3      	str	r3, [r4, #12]
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	6023      	str	r3, [r4, #0]
 8002efc:	782b      	ldrb	r3, [r5, #0]
 8002efe:	2b2e      	cmp	r3, #46	; 0x2e
 8002f00:	d10a      	bne.n	8002f18 <_svfiprintf_r+0x12c>
 8002f02:	786b      	ldrb	r3, [r5, #1]
 8002f04:	2b2a      	cmp	r3, #42	; 0x2a
 8002f06:	d135      	bne.n	8002f74 <_svfiprintf_r+0x188>
 8002f08:	9b07      	ldr	r3, [sp, #28]
 8002f0a:	3502      	adds	r5, #2
 8002f0c:	1d1a      	adds	r2, r3, #4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	9207      	str	r2, [sp, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	db2b      	blt.n	8002f6e <_svfiprintf_r+0x182>
 8002f16:	9309      	str	r3, [sp, #36]	; 0x24
 8002f18:	4e2f      	ldr	r6, [pc, #188]	; (8002fd8 <_svfiprintf_r+0x1ec>)
 8002f1a:	7829      	ldrb	r1, [r5, #0]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	0030      	movs	r0, r6
 8002f20:	f000 f9d8 	bl	80032d4 <memchr>
 8002f24:	2800      	cmp	r0, #0
 8002f26:	d006      	beq.n	8002f36 <_svfiprintf_r+0x14a>
 8002f28:	2340      	movs	r3, #64	; 0x40
 8002f2a:	1b80      	subs	r0, r0, r6
 8002f2c:	4083      	lsls	r3, r0
 8002f2e:	6822      	ldr	r2, [r4, #0]
 8002f30:	3501      	adds	r5, #1
 8002f32:	4313      	orrs	r3, r2
 8002f34:	6023      	str	r3, [r4, #0]
 8002f36:	7829      	ldrb	r1, [r5, #0]
 8002f38:	2206      	movs	r2, #6
 8002f3a:	4828      	ldr	r0, [pc, #160]	; (8002fdc <_svfiprintf_r+0x1f0>)
 8002f3c:	1c6e      	adds	r6, r5, #1
 8002f3e:	7621      	strb	r1, [r4, #24]
 8002f40:	f000 f9c8 	bl	80032d4 <memchr>
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d03c      	beq.n	8002fc2 <_svfiprintf_r+0x1d6>
 8002f48:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <_svfiprintf_r+0x1f4>)
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d125      	bne.n	8002f9a <_svfiprintf_r+0x1ae>
 8002f4e:	2207      	movs	r2, #7
 8002f50:	9b07      	ldr	r3, [sp, #28]
 8002f52:	3307      	adds	r3, #7
 8002f54:	4393      	bics	r3, r2
 8002f56:	3308      	adds	r3, #8
 8002f58:	9307      	str	r3, [sp, #28]
 8002f5a:	6963      	ldr	r3, [r4, #20]
 8002f5c:	9a04      	ldr	r2, [sp, #16]
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	6163      	str	r3, [r4, #20]
 8002f62:	e766      	b.n	8002e32 <_svfiprintf_r+0x46>
 8002f64:	4343      	muls	r3, r0
 8002f66:	2101      	movs	r1, #1
 8002f68:	189b      	adds	r3, r3, r2
 8002f6a:	0035      	movs	r5, r6
 8002f6c:	e7a6      	b.n	8002ebc <_svfiprintf_r+0xd0>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	425b      	negs	r3, r3
 8002f72:	e7d0      	b.n	8002f16 <_svfiprintf_r+0x12a>
 8002f74:	2300      	movs	r3, #0
 8002f76:	200a      	movs	r0, #10
 8002f78:	001a      	movs	r2, r3
 8002f7a:	3501      	adds	r5, #1
 8002f7c:	6063      	str	r3, [r4, #4]
 8002f7e:	7829      	ldrb	r1, [r5, #0]
 8002f80:	1c6e      	adds	r6, r5, #1
 8002f82:	3930      	subs	r1, #48	; 0x30
 8002f84:	2909      	cmp	r1, #9
 8002f86:	d903      	bls.n	8002f90 <_svfiprintf_r+0x1a4>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0c5      	beq.n	8002f18 <_svfiprintf_r+0x12c>
 8002f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8002f8e:	e7c3      	b.n	8002f18 <_svfiprintf_r+0x12c>
 8002f90:	4342      	muls	r2, r0
 8002f92:	2301      	movs	r3, #1
 8002f94:	1852      	adds	r2, r2, r1
 8002f96:	0035      	movs	r5, r6
 8002f98:	e7f1      	b.n	8002f7e <_svfiprintf_r+0x192>
 8002f9a:	ab07      	add	r3, sp, #28
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	003a      	movs	r2, r7
 8002fa0:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <_svfiprintf_r+0x1f8>)
 8002fa2:	0021      	movs	r1, r4
 8002fa4:	9803      	ldr	r0, [sp, #12]
 8002fa6:	e000      	b.n	8002faa <_svfiprintf_r+0x1be>
 8002fa8:	bf00      	nop
 8002faa:	9004      	str	r0, [sp, #16]
 8002fac:	9b04      	ldr	r3, [sp, #16]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	d1d3      	bne.n	8002f5a <_svfiprintf_r+0x16e>
 8002fb2:	89bb      	ldrh	r3, [r7, #12]
 8002fb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002fb6:	065b      	lsls	r3, r3, #25
 8002fb8:	d400      	bmi.n	8002fbc <_svfiprintf_r+0x1d0>
 8002fba:	e72e      	b.n	8002e1a <_svfiprintf_r+0x2e>
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	4240      	negs	r0, r0
 8002fc0:	e72b      	b.n	8002e1a <_svfiprintf_r+0x2e>
 8002fc2:	ab07      	add	r3, sp, #28
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	003a      	movs	r2, r7
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <_svfiprintf_r+0x1f8>)
 8002fca:	0021      	movs	r1, r4
 8002fcc:	9803      	ldr	r0, [sp, #12]
 8002fce:	f000 f879 	bl	80030c4 <_printf_i>
 8002fd2:	e7ea      	b.n	8002faa <_svfiprintf_r+0x1be>
 8002fd4:	08003630 	.word	0x08003630
 8002fd8:	08003636 	.word	0x08003636
 8002fdc:	0800363a 	.word	0x0800363a
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	08002d29 	.word	0x08002d29

08002fe8 <_printf_common>:
 8002fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fea:	0015      	movs	r5, r2
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	688a      	ldr	r2, [r1, #8]
 8002ff0:	690b      	ldr	r3, [r1, #16]
 8002ff2:	9000      	str	r0, [sp, #0]
 8002ff4:	000c      	movs	r4, r1
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	da00      	bge.n	8002ffc <_printf_common+0x14>
 8002ffa:	0013      	movs	r3, r2
 8002ffc:	0022      	movs	r2, r4
 8002ffe:	602b      	str	r3, [r5, #0]
 8003000:	3243      	adds	r2, #67	; 0x43
 8003002:	7812      	ldrb	r2, [r2, #0]
 8003004:	2a00      	cmp	r2, #0
 8003006:	d001      	beq.n	800300c <_printf_common+0x24>
 8003008:	3301      	adds	r3, #1
 800300a:	602b      	str	r3, [r5, #0]
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	069b      	lsls	r3, r3, #26
 8003010:	d502      	bpl.n	8003018 <_printf_common+0x30>
 8003012:	682b      	ldr	r3, [r5, #0]
 8003014:	3302      	adds	r3, #2
 8003016:	602b      	str	r3, [r5, #0]
 8003018:	2706      	movs	r7, #6
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	401f      	ands	r7, r3
 800301e:	d027      	beq.n	8003070 <_printf_common+0x88>
 8003020:	0023      	movs	r3, r4
 8003022:	3343      	adds	r3, #67	; 0x43
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	1e5a      	subs	r2, r3, #1
 8003028:	4193      	sbcs	r3, r2
 800302a:	6822      	ldr	r2, [r4, #0]
 800302c:	0692      	lsls	r2, r2, #26
 800302e:	d430      	bmi.n	8003092 <_printf_common+0xaa>
 8003030:	0022      	movs	r2, r4
 8003032:	9901      	ldr	r1, [sp, #4]
 8003034:	3243      	adds	r2, #67	; 0x43
 8003036:	9800      	ldr	r0, [sp, #0]
 8003038:	9e08      	ldr	r6, [sp, #32]
 800303a:	47b0      	blx	r6
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d025      	beq.n	800308c <_printf_common+0xa4>
 8003040:	2306      	movs	r3, #6
 8003042:	6820      	ldr	r0, [r4, #0]
 8003044:	682a      	ldr	r2, [r5, #0]
 8003046:	68e1      	ldr	r1, [r4, #12]
 8003048:	4003      	ands	r3, r0
 800304a:	2500      	movs	r5, #0
 800304c:	2b04      	cmp	r3, #4
 800304e:	d103      	bne.n	8003058 <_printf_common+0x70>
 8003050:	1a8d      	subs	r5, r1, r2
 8003052:	43eb      	mvns	r3, r5
 8003054:	17db      	asrs	r3, r3, #31
 8003056:	401d      	ands	r5, r3
 8003058:	68a3      	ldr	r3, [r4, #8]
 800305a:	6922      	ldr	r2, [r4, #16]
 800305c:	4293      	cmp	r3, r2
 800305e:	dd01      	ble.n	8003064 <_printf_common+0x7c>
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	18ed      	adds	r5, r5, r3
 8003064:	2700      	movs	r7, #0
 8003066:	42bd      	cmp	r5, r7
 8003068:	d120      	bne.n	80030ac <_printf_common+0xc4>
 800306a:	2000      	movs	r0, #0
 800306c:	e010      	b.n	8003090 <_printf_common+0xa8>
 800306e:	3701      	adds	r7, #1
 8003070:	68e3      	ldr	r3, [r4, #12]
 8003072:	682a      	ldr	r2, [r5, #0]
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	42bb      	cmp	r3, r7
 8003078:	ddd2      	ble.n	8003020 <_printf_common+0x38>
 800307a:	0022      	movs	r2, r4
 800307c:	2301      	movs	r3, #1
 800307e:	3219      	adds	r2, #25
 8003080:	9901      	ldr	r1, [sp, #4]
 8003082:	9800      	ldr	r0, [sp, #0]
 8003084:	9e08      	ldr	r6, [sp, #32]
 8003086:	47b0      	blx	r6
 8003088:	1c43      	adds	r3, r0, #1
 800308a:	d1f0      	bne.n	800306e <_printf_common+0x86>
 800308c:	2001      	movs	r0, #1
 800308e:	4240      	negs	r0, r0
 8003090:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003092:	2030      	movs	r0, #48	; 0x30
 8003094:	18e1      	adds	r1, r4, r3
 8003096:	3143      	adds	r1, #67	; 0x43
 8003098:	7008      	strb	r0, [r1, #0]
 800309a:	0021      	movs	r1, r4
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	3145      	adds	r1, #69	; 0x45
 80030a0:	7809      	ldrb	r1, [r1, #0]
 80030a2:	18a2      	adds	r2, r4, r2
 80030a4:	3243      	adds	r2, #67	; 0x43
 80030a6:	3302      	adds	r3, #2
 80030a8:	7011      	strb	r1, [r2, #0]
 80030aa:	e7c1      	b.n	8003030 <_printf_common+0x48>
 80030ac:	0022      	movs	r2, r4
 80030ae:	2301      	movs	r3, #1
 80030b0:	321a      	adds	r2, #26
 80030b2:	9901      	ldr	r1, [sp, #4]
 80030b4:	9800      	ldr	r0, [sp, #0]
 80030b6:	9e08      	ldr	r6, [sp, #32]
 80030b8:	47b0      	blx	r6
 80030ba:	1c43      	adds	r3, r0, #1
 80030bc:	d0e6      	beq.n	800308c <_printf_common+0xa4>
 80030be:	3701      	adds	r7, #1
 80030c0:	e7d1      	b.n	8003066 <_printf_common+0x7e>
	...

080030c4 <_printf_i>:
 80030c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	9204      	str	r2, [sp, #16]
 80030ca:	000a      	movs	r2, r1
 80030cc:	3243      	adds	r2, #67	; 0x43
 80030ce:	9305      	str	r3, [sp, #20]
 80030d0:	9003      	str	r0, [sp, #12]
 80030d2:	9202      	str	r2, [sp, #8]
 80030d4:	7e0a      	ldrb	r2, [r1, #24]
 80030d6:	000c      	movs	r4, r1
 80030d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030da:	2a6e      	cmp	r2, #110	; 0x6e
 80030dc:	d100      	bne.n	80030e0 <_printf_i+0x1c>
 80030de:	e086      	b.n	80031ee <_printf_i+0x12a>
 80030e0:	d81f      	bhi.n	8003122 <_printf_i+0x5e>
 80030e2:	2a63      	cmp	r2, #99	; 0x63
 80030e4:	d033      	beq.n	800314e <_printf_i+0x8a>
 80030e6:	d808      	bhi.n	80030fa <_printf_i+0x36>
 80030e8:	2a00      	cmp	r2, #0
 80030ea:	d100      	bne.n	80030ee <_printf_i+0x2a>
 80030ec:	e08c      	b.n	8003208 <_printf_i+0x144>
 80030ee:	2a58      	cmp	r2, #88	; 0x58
 80030f0:	d04d      	beq.n	800318e <_printf_i+0xca>
 80030f2:	0025      	movs	r5, r4
 80030f4:	3542      	adds	r5, #66	; 0x42
 80030f6:	702a      	strb	r2, [r5, #0]
 80030f8:	e030      	b.n	800315c <_printf_i+0x98>
 80030fa:	2a64      	cmp	r2, #100	; 0x64
 80030fc:	d001      	beq.n	8003102 <_printf_i+0x3e>
 80030fe:	2a69      	cmp	r2, #105	; 0x69
 8003100:	d1f7      	bne.n	80030f2 <_printf_i+0x2e>
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	6825      	ldr	r5, [r4, #0]
 8003106:	1d0a      	adds	r2, r1, #4
 8003108:	0628      	lsls	r0, r5, #24
 800310a:	d529      	bpl.n	8003160 <_printf_i+0x9c>
 800310c:	6808      	ldr	r0, [r1, #0]
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	2800      	cmp	r0, #0
 8003112:	da03      	bge.n	800311c <_printf_i+0x58>
 8003114:	232d      	movs	r3, #45	; 0x2d
 8003116:	9a02      	ldr	r2, [sp, #8]
 8003118:	4240      	negs	r0, r0
 800311a:	7013      	strb	r3, [r2, #0]
 800311c:	4e6b      	ldr	r6, [pc, #428]	; (80032cc <_printf_i+0x208>)
 800311e:	270a      	movs	r7, #10
 8003120:	e04f      	b.n	80031c2 <_printf_i+0xfe>
 8003122:	2a73      	cmp	r2, #115	; 0x73
 8003124:	d074      	beq.n	8003210 <_printf_i+0x14c>
 8003126:	d808      	bhi.n	800313a <_printf_i+0x76>
 8003128:	2a6f      	cmp	r2, #111	; 0x6f
 800312a:	d01f      	beq.n	800316c <_printf_i+0xa8>
 800312c:	2a70      	cmp	r2, #112	; 0x70
 800312e:	d1e0      	bne.n	80030f2 <_printf_i+0x2e>
 8003130:	2220      	movs	r2, #32
 8003132:	6809      	ldr	r1, [r1, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	6022      	str	r2, [r4, #0]
 8003138:	e003      	b.n	8003142 <_printf_i+0x7e>
 800313a:	2a75      	cmp	r2, #117	; 0x75
 800313c:	d016      	beq.n	800316c <_printf_i+0xa8>
 800313e:	2a78      	cmp	r2, #120	; 0x78
 8003140:	d1d7      	bne.n	80030f2 <_printf_i+0x2e>
 8003142:	0022      	movs	r2, r4
 8003144:	2178      	movs	r1, #120	; 0x78
 8003146:	3245      	adds	r2, #69	; 0x45
 8003148:	7011      	strb	r1, [r2, #0]
 800314a:	4e61      	ldr	r6, [pc, #388]	; (80032d0 <_printf_i+0x20c>)
 800314c:	e022      	b.n	8003194 <_printf_i+0xd0>
 800314e:	0025      	movs	r5, r4
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	3542      	adds	r5, #66	; 0x42
 8003154:	1d11      	adds	r1, r2, #4
 8003156:	6019      	str	r1, [r3, #0]
 8003158:	6813      	ldr	r3, [r2, #0]
 800315a:	702b      	strb	r3, [r5, #0]
 800315c:	2301      	movs	r3, #1
 800315e:	e065      	b.n	800322c <_printf_i+0x168>
 8003160:	6808      	ldr	r0, [r1, #0]
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	0669      	lsls	r1, r5, #25
 8003166:	d5d3      	bpl.n	8003110 <_printf_i+0x4c>
 8003168:	b200      	sxth	r0, r0
 800316a:	e7d1      	b.n	8003110 <_printf_i+0x4c>
 800316c:	6819      	ldr	r1, [r3, #0]
 800316e:	6825      	ldr	r5, [r4, #0]
 8003170:	1d08      	adds	r0, r1, #4
 8003172:	6018      	str	r0, [r3, #0]
 8003174:	6808      	ldr	r0, [r1, #0]
 8003176:	062e      	lsls	r6, r5, #24
 8003178:	d505      	bpl.n	8003186 <_printf_i+0xc2>
 800317a:	4e54      	ldr	r6, [pc, #336]	; (80032cc <_printf_i+0x208>)
 800317c:	2708      	movs	r7, #8
 800317e:	2a6f      	cmp	r2, #111	; 0x6f
 8003180:	d01b      	beq.n	80031ba <_printf_i+0xf6>
 8003182:	270a      	movs	r7, #10
 8003184:	e019      	b.n	80031ba <_printf_i+0xf6>
 8003186:	066d      	lsls	r5, r5, #25
 8003188:	d5f7      	bpl.n	800317a <_printf_i+0xb6>
 800318a:	b280      	uxth	r0, r0
 800318c:	e7f5      	b.n	800317a <_printf_i+0xb6>
 800318e:	3145      	adds	r1, #69	; 0x45
 8003190:	4e4e      	ldr	r6, [pc, #312]	; (80032cc <_printf_i+0x208>)
 8003192:	700a      	strb	r2, [r1, #0]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	6822      	ldr	r2, [r4, #0]
 8003198:	1d01      	adds	r1, r0, #4
 800319a:	6800      	ldr	r0, [r0, #0]
 800319c:	6019      	str	r1, [r3, #0]
 800319e:	0615      	lsls	r5, r2, #24
 80031a0:	d521      	bpl.n	80031e6 <_printf_i+0x122>
 80031a2:	07d3      	lsls	r3, r2, #31
 80031a4:	d502      	bpl.n	80031ac <_printf_i+0xe8>
 80031a6:	2320      	movs	r3, #32
 80031a8:	431a      	orrs	r2, r3
 80031aa:	6022      	str	r2, [r4, #0]
 80031ac:	2710      	movs	r7, #16
 80031ae:	2800      	cmp	r0, #0
 80031b0:	d103      	bne.n	80031ba <_printf_i+0xf6>
 80031b2:	2320      	movs	r3, #32
 80031b4:	6822      	ldr	r2, [r4, #0]
 80031b6:	439a      	bics	r2, r3
 80031b8:	6022      	str	r2, [r4, #0]
 80031ba:	0023      	movs	r3, r4
 80031bc:	2200      	movs	r2, #0
 80031be:	3343      	adds	r3, #67	; 0x43
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	6863      	ldr	r3, [r4, #4]
 80031c4:	60a3      	str	r3, [r4, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	db58      	blt.n	800327c <_printf_i+0x1b8>
 80031ca:	2204      	movs	r2, #4
 80031cc:	6821      	ldr	r1, [r4, #0]
 80031ce:	4391      	bics	r1, r2
 80031d0:	6021      	str	r1, [r4, #0]
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d154      	bne.n	8003280 <_printf_i+0x1bc>
 80031d6:	9d02      	ldr	r5, [sp, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d05a      	beq.n	8003292 <_printf_i+0x1ce>
 80031dc:	0025      	movs	r5, r4
 80031de:	7833      	ldrb	r3, [r6, #0]
 80031e0:	3542      	adds	r5, #66	; 0x42
 80031e2:	702b      	strb	r3, [r5, #0]
 80031e4:	e055      	b.n	8003292 <_printf_i+0x1ce>
 80031e6:	0655      	lsls	r5, r2, #25
 80031e8:	d5db      	bpl.n	80031a2 <_printf_i+0xde>
 80031ea:	b280      	uxth	r0, r0
 80031ec:	e7d9      	b.n	80031a2 <_printf_i+0xde>
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	680d      	ldr	r5, [r1, #0]
 80031f2:	1d10      	adds	r0, r2, #4
 80031f4:	6949      	ldr	r1, [r1, #20]
 80031f6:	6018      	str	r0, [r3, #0]
 80031f8:	6813      	ldr	r3, [r2, #0]
 80031fa:	062e      	lsls	r6, r5, #24
 80031fc:	d501      	bpl.n	8003202 <_printf_i+0x13e>
 80031fe:	6019      	str	r1, [r3, #0]
 8003200:	e002      	b.n	8003208 <_printf_i+0x144>
 8003202:	066d      	lsls	r5, r5, #25
 8003204:	d5fb      	bpl.n	80031fe <_printf_i+0x13a>
 8003206:	8019      	strh	r1, [r3, #0]
 8003208:	2300      	movs	r3, #0
 800320a:	9d02      	ldr	r5, [sp, #8]
 800320c:	6123      	str	r3, [r4, #16]
 800320e:	e04f      	b.n	80032b0 <_printf_i+0x1ec>
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	1d11      	adds	r1, r2, #4
 8003214:	6019      	str	r1, [r3, #0]
 8003216:	6815      	ldr	r5, [r2, #0]
 8003218:	2100      	movs	r1, #0
 800321a:	6862      	ldr	r2, [r4, #4]
 800321c:	0028      	movs	r0, r5
 800321e:	f000 f859 	bl	80032d4 <memchr>
 8003222:	2800      	cmp	r0, #0
 8003224:	d001      	beq.n	800322a <_printf_i+0x166>
 8003226:	1b40      	subs	r0, r0, r5
 8003228:	6060      	str	r0, [r4, #4]
 800322a:	6863      	ldr	r3, [r4, #4]
 800322c:	6123      	str	r3, [r4, #16]
 800322e:	2300      	movs	r3, #0
 8003230:	9a02      	ldr	r2, [sp, #8]
 8003232:	7013      	strb	r3, [r2, #0]
 8003234:	e03c      	b.n	80032b0 <_printf_i+0x1ec>
 8003236:	6923      	ldr	r3, [r4, #16]
 8003238:	002a      	movs	r2, r5
 800323a:	9904      	ldr	r1, [sp, #16]
 800323c:	9803      	ldr	r0, [sp, #12]
 800323e:	9d05      	ldr	r5, [sp, #20]
 8003240:	47a8      	blx	r5
 8003242:	1c43      	adds	r3, r0, #1
 8003244:	d03e      	beq.n	80032c4 <_printf_i+0x200>
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	079b      	lsls	r3, r3, #30
 800324a:	d415      	bmi.n	8003278 <_printf_i+0x1b4>
 800324c:	9b07      	ldr	r3, [sp, #28]
 800324e:	68e0      	ldr	r0, [r4, #12]
 8003250:	4298      	cmp	r0, r3
 8003252:	da39      	bge.n	80032c8 <_printf_i+0x204>
 8003254:	0018      	movs	r0, r3
 8003256:	e037      	b.n	80032c8 <_printf_i+0x204>
 8003258:	0022      	movs	r2, r4
 800325a:	2301      	movs	r3, #1
 800325c:	3219      	adds	r2, #25
 800325e:	9904      	ldr	r1, [sp, #16]
 8003260:	9803      	ldr	r0, [sp, #12]
 8003262:	9e05      	ldr	r6, [sp, #20]
 8003264:	47b0      	blx	r6
 8003266:	1c43      	adds	r3, r0, #1
 8003268:	d02c      	beq.n	80032c4 <_printf_i+0x200>
 800326a:	3501      	adds	r5, #1
 800326c:	68e3      	ldr	r3, [r4, #12]
 800326e:	9a07      	ldr	r2, [sp, #28]
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	42ab      	cmp	r3, r5
 8003274:	dcf0      	bgt.n	8003258 <_printf_i+0x194>
 8003276:	e7e9      	b.n	800324c <_printf_i+0x188>
 8003278:	2500      	movs	r5, #0
 800327a:	e7f7      	b.n	800326c <_printf_i+0x1a8>
 800327c:	2800      	cmp	r0, #0
 800327e:	d0ad      	beq.n	80031dc <_printf_i+0x118>
 8003280:	9d02      	ldr	r5, [sp, #8]
 8003282:	0039      	movs	r1, r7
 8003284:	f7fc ffce 	bl	8000224 <__aeabi_uidivmod>
 8003288:	5c73      	ldrb	r3, [r6, r1]
 800328a:	3d01      	subs	r5, #1
 800328c:	702b      	strb	r3, [r5, #0]
 800328e:	2800      	cmp	r0, #0
 8003290:	d1f7      	bne.n	8003282 <_printf_i+0x1be>
 8003292:	2f08      	cmp	r7, #8
 8003294:	d109      	bne.n	80032aa <_printf_i+0x1e6>
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	07db      	lsls	r3, r3, #31
 800329a:	d506      	bpl.n	80032aa <_printf_i+0x1e6>
 800329c:	6863      	ldr	r3, [r4, #4]
 800329e:	6922      	ldr	r2, [r4, #16]
 80032a0:	4293      	cmp	r3, r2
 80032a2:	dc02      	bgt.n	80032aa <_printf_i+0x1e6>
 80032a4:	2330      	movs	r3, #48	; 0x30
 80032a6:	3d01      	subs	r5, #1
 80032a8:	702b      	strb	r3, [r5, #0]
 80032aa:	9b02      	ldr	r3, [sp, #8]
 80032ac:	1b5b      	subs	r3, r3, r5
 80032ae:	6123      	str	r3, [r4, #16]
 80032b0:	9b05      	ldr	r3, [sp, #20]
 80032b2:	aa07      	add	r2, sp, #28
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	0021      	movs	r1, r4
 80032b8:	9b04      	ldr	r3, [sp, #16]
 80032ba:	9803      	ldr	r0, [sp, #12]
 80032bc:	f7ff fe94 	bl	8002fe8 <_printf_common>
 80032c0:	1c43      	adds	r3, r0, #1
 80032c2:	d1b8      	bne.n	8003236 <_printf_i+0x172>
 80032c4:	2001      	movs	r0, #1
 80032c6:	4240      	negs	r0, r0
 80032c8:	b009      	add	sp, #36	; 0x24
 80032ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032cc:	08003641 	.word	0x08003641
 80032d0:	08003652 	.word	0x08003652

080032d4 <memchr>:
 80032d4:	b2c9      	uxtb	r1, r1
 80032d6:	1882      	adds	r2, r0, r2
 80032d8:	4290      	cmp	r0, r2
 80032da:	d101      	bne.n	80032e0 <memchr+0xc>
 80032dc:	2000      	movs	r0, #0
 80032de:	4770      	bx	lr
 80032e0:	7803      	ldrb	r3, [r0, #0]
 80032e2:	428b      	cmp	r3, r1
 80032e4:	d0fb      	beq.n	80032de <memchr+0xa>
 80032e6:	3001      	adds	r0, #1
 80032e8:	e7f6      	b.n	80032d8 <memchr+0x4>

080032ea <memcpy>:
 80032ea:	2300      	movs	r3, #0
 80032ec:	b510      	push	{r4, lr}
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d100      	bne.n	80032f4 <memcpy+0xa>
 80032f2:	bd10      	pop	{r4, pc}
 80032f4:	5ccc      	ldrb	r4, [r1, r3]
 80032f6:	54c4      	strb	r4, [r0, r3]
 80032f8:	3301      	adds	r3, #1
 80032fa:	e7f8      	b.n	80032ee <memcpy+0x4>

080032fc <memmove>:
 80032fc:	b510      	push	{r4, lr}
 80032fe:	4288      	cmp	r0, r1
 8003300:	d902      	bls.n	8003308 <memmove+0xc>
 8003302:	188b      	adds	r3, r1, r2
 8003304:	4298      	cmp	r0, r3
 8003306:	d303      	bcc.n	8003310 <memmove+0x14>
 8003308:	2300      	movs	r3, #0
 800330a:	e007      	b.n	800331c <memmove+0x20>
 800330c:	5c8b      	ldrb	r3, [r1, r2]
 800330e:	5483      	strb	r3, [r0, r2]
 8003310:	3a01      	subs	r2, #1
 8003312:	d2fb      	bcs.n	800330c <memmove+0x10>
 8003314:	bd10      	pop	{r4, pc}
 8003316:	5ccc      	ldrb	r4, [r1, r3]
 8003318:	54c4      	strb	r4, [r0, r3]
 800331a:	3301      	adds	r3, #1
 800331c:	429a      	cmp	r2, r3
 800331e:	d1fa      	bne.n	8003316 <memmove+0x1a>
 8003320:	e7f8      	b.n	8003314 <memmove+0x18>
	...

08003324 <_free_r>:
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	0005      	movs	r5, r0
 8003328:	2900      	cmp	r1, #0
 800332a:	d010      	beq.n	800334e <_free_r+0x2a>
 800332c:	1f0c      	subs	r4, r1, #4
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	da00      	bge.n	8003336 <_free_r+0x12>
 8003334:	18e4      	adds	r4, r4, r3
 8003336:	0028      	movs	r0, r5
 8003338:	f000 f8d4 	bl	80034e4 <__malloc_lock>
 800333c:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <_free_r+0x90>)
 800333e:	6813      	ldr	r3, [r2, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <_free_r+0x2c>
 8003344:	6063      	str	r3, [r4, #4]
 8003346:	6014      	str	r4, [r2, #0]
 8003348:	0028      	movs	r0, r5
 800334a:	f000 f8cc 	bl	80034e6 <__malloc_unlock>
 800334e:	bd70      	pop	{r4, r5, r6, pc}
 8003350:	42a3      	cmp	r3, r4
 8003352:	d909      	bls.n	8003368 <_free_r+0x44>
 8003354:	6821      	ldr	r1, [r4, #0]
 8003356:	1860      	adds	r0, r4, r1
 8003358:	4283      	cmp	r3, r0
 800335a:	d1f3      	bne.n	8003344 <_free_r+0x20>
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	1841      	adds	r1, r0, r1
 8003362:	6021      	str	r1, [r4, #0]
 8003364:	e7ee      	b.n	8003344 <_free_r+0x20>
 8003366:	0013      	movs	r3, r2
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	2a00      	cmp	r2, #0
 800336c:	d001      	beq.n	8003372 <_free_r+0x4e>
 800336e:	42a2      	cmp	r2, r4
 8003370:	d9f9      	bls.n	8003366 <_free_r+0x42>
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	1858      	adds	r0, r3, r1
 8003376:	42a0      	cmp	r0, r4
 8003378:	d10b      	bne.n	8003392 <_free_r+0x6e>
 800337a:	6820      	ldr	r0, [r4, #0]
 800337c:	1809      	adds	r1, r1, r0
 800337e:	1858      	adds	r0, r3, r1
 8003380:	6019      	str	r1, [r3, #0]
 8003382:	4282      	cmp	r2, r0
 8003384:	d1e0      	bne.n	8003348 <_free_r+0x24>
 8003386:	6810      	ldr	r0, [r2, #0]
 8003388:	6852      	ldr	r2, [r2, #4]
 800338a:	1841      	adds	r1, r0, r1
 800338c:	6019      	str	r1, [r3, #0]
 800338e:	605a      	str	r2, [r3, #4]
 8003390:	e7da      	b.n	8003348 <_free_r+0x24>
 8003392:	42a0      	cmp	r0, r4
 8003394:	d902      	bls.n	800339c <_free_r+0x78>
 8003396:	230c      	movs	r3, #12
 8003398:	602b      	str	r3, [r5, #0]
 800339a:	e7d5      	b.n	8003348 <_free_r+0x24>
 800339c:	6821      	ldr	r1, [r4, #0]
 800339e:	1860      	adds	r0, r4, r1
 80033a0:	4282      	cmp	r2, r0
 80033a2:	d103      	bne.n	80033ac <_free_r+0x88>
 80033a4:	6810      	ldr	r0, [r2, #0]
 80033a6:	6852      	ldr	r2, [r2, #4]
 80033a8:	1841      	adds	r1, r0, r1
 80033aa:	6021      	str	r1, [r4, #0]
 80033ac:	6062      	str	r2, [r4, #4]
 80033ae:	605c      	str	r4, [r3, #4]
 80033b0:	e7ca      	b.n	8003348 <_free_r+0x24>
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	20000090 	.word	0x20000090

080033b8 <_malloc_r>:
 80033b8:	2303      	movs	r3, #3
 80033ba:	b570      	push	{r4, r5, r6, lr}
 80033bc:	1ccd      	adds	r5, r1, #3
 80033be:	439d      	bics	r5, r3
 80033c0:	3508      	adds	r5, #8
 80033c2:	0006      	movs	r6, r0
 80033c4:	2d0c      	cmp	r5, #12
 80033c6:	d21e      	bcs.n	8003406 <_malloc_r+0x4e>
 80033c8:	250c      	movs	r5, #12
 80033ca:	42a9      	cmp	r1, r5
 80033cc:	d81d      	bhi.n	800340a <_malloc_r+0x52>
 80033ce:	0030      	movs	r0, r6
 80033d0:	f000 f888 	bl	80034e4 <__malloc_lock>
 80033d4:	4a25      	ldr	r2, [pc, #148]	; (800346c <_malloc_r+0xb4>)
 80033d6:	6814      	ldr	r4, [r2, #0]
 80033d8:	0021      	movs	r1, r4
 80033da:	2900      	cmp	r1, #0
 80033dc:	d119      	bne.n	8003412 <_malloc_r+0x5a>
 80033de:	4c24      	ldr	r4, [pc, #144]	; (8003470 <_malloc_r+0xb8>)
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <_malloc_r+0x36>
 80033e6:	0030      	movs	r0, r6
 80033e8:	f000 f86a 	bl	80034c0 <_sbrk_r>
 80033ec:	6020      	str	r0, [r4, #0]
 80033ee:	0029      	movs	r1, r5
 80033f0:	0030      	movs	r0, r6
 80033f2:	f000 f865 	bl	80034c0 <_sbrk_r>
 80033f6:	1c43      	adds	r3, r0, #1
 80033f8:	d12b      	bne.n	8003452 <_malloc_r+0x9a>
 80033fa:	230c      	movs	r3, #12
 80033fc:	0030      	movs	r0, r6
 80033fe:	6033      	str	r3, [r6, #0]
 8003400:	f000 f871 	bl	80034e6 <__malloc_unlock>
 8003404:	e003      	b.n	800340e <_malloc_r+0x56>
 8003406:	2d00      	cmp	r5, #0
 8003408:	dadf      	bge.n	80033ca <_malloc_r+0x12>
 800340a:	230c      	movs	r3, #12
 800340c:	6033      	str	r3, [r6, #0]
 800340e:	2000      	movs	r0, #0
 8003410:	bd70      	pop	{r4, r5, r6, pc}
 8003412:	680b      	ldr	r3, [r1, #0]
 8003414:	1b5b      	subs	r3, r3, r5
 8003416:	d419      	bmi.n	800344c <_malloc_r+0x94>
 8003418:	2b0b      	cmp	r3, #11
 800341a:	d903      	bls.n	8003424 <_malloc_r+0x6c>
 800341c:	600b      	str	r3, [r1, #0]
 800341e:	18cc      	adds	r4, r1, r3
 8003420:	6025      	str	r5, [r4, #0]
 8003422:	e003      	b.n	800342c <_malloc_r+0x74>
 8003424:	684b      	ldr	r3, [r1, #4]
 8003426:	428c      	cmp	r4, r1
 8003428:	d10d      	bne.n	8003446 <_malloc_r+0x8e>
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	0030      	movs	r0, r6
 800342e:	f000 f85a 	bl	80034e6 <__malloc_unlock>
 8003432:	0020      	movs	r0, r4
 8003434:	2207      	movs	r2, #7
 8003436:	300b      	adds	r0, #11
 8003438:	1d23      	adds	r3, r4, #4
 800343a:	4390      	bics	r0, r2
 800343c:	1ac3      	subs	r3, r0, r3
 800343e:	d0e7      	beq.n	8003410 <_malloc_r+0x58>
 8003440:	425a      	negs	r2, r3
 8003442:	50e2      	str	r2, [r4, r3]
 8003444:	e7e4      	b.n	8003410 <_malloc_r+0x58>
 8003446:	6063      	str	r3, [r4, #4]
 8003448:	000c      	movs	r4, r1
 800344a:	e7ef      	b.n	800342c <_malloc_r+0x74>
 800344c:	000c      	movs	r4, r1
 800344e:	6849      	ldr	r1, [r1, #4]
 8003450:	e7c3      	b.n	80033da <_malloc_r+0x22>
 8003452:	2303      	movs	r3, #3
 8003454:	1cc4      	adds	r4, r0, #3
 8003456:	439c      	bics	r4, r3
 8003458:	42a0      	cmp	r0, r4
 800345a:	d0e1      	beq.n	8003420 <_malloc_r+0x68>
 800345c:	1a21      	subs	r1, r4, r0
 800345e:	0030      	movs	r0, r6
 8003460:	f000 f82e 	bl	80034c0 <_sbrk_r>
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	d1db      	bne.n	8003420 <_malloc_r+0x68>
 8003468:	e7c7      	b.n	80033fa <_malloc_r+0x42>
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	20000090 	.word	0x20000090
 8003470:	20000094 	.word	0x20000094

08003474 <_realloc_r>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	0007      	movs	r7, r0
 8003478:	000d      	movs	r5, r1
 800347a:	0016      	movs	r6, r2
 800347c:	2900      	cmp	r1, #0
 800347e:	d105      	bne.n	800348c <_realloc_r+0x18>
 8003480:	0011      	movs	r1, r2
 8003482:	f7ff ff99 	bl	80033b8 <_malloc_r>
 8003486:	0004      	movs	r4, r0
 8003488:	0020      	movs	r0, r4
 800348a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800348c:	2a00      	cmp	r2, #0
 800348e:	d103      	bne.n	8003498 <_realloc_r+0x24>
 8003490:	f7ff ff48 	bl	8003324 <_free_r>
 8003494:	0034      	movs	r4, r6
 8003496:	e7f7      	b.n	8003488 <_realloc_r+0x14>
 8003498:	f000 f826 	bl	80034e8 <_malloc_usable_size_r>
 800349c:	002c      	movs	r4, r5
 800349e:	42b0      	cmp	r0, r6
 80034a0:	d2f2      	bcs.n	8003488 <_realloc_r+0x14>
 80034a2:	0031      	movs	r1, r6
 80034a4:	0038      	movs	r0, r7
 80034a6:	f7ff ff87 	bl	80033b8 <_malloc_r>
 80034aa:	1e04      	subs	r4, r0, #0
 80034ac:	d0ec      	beq.n	8003488 <_realloc_r+0x14>
 80034ae:	0029      	movs	r1, r5
 80034b0:	0032      	movs	r2, r6
 80034b2:	f7ff ff1a 	bl	80032ea <memcpy>
 80034b6:	0029      	movs	r1, r5
 80034b8:	0038      	movs	r0, r7
 80034ba:	f7ff ff33 	bl	8003324 <_free_r>
 80034be:	e7e3      	b.n	8003488 <_realloc_r+0x14>

080034c0 <_sbrk_r>:
 80034c0:	2300      	movs	r3, #0
 80034c2:	b570      	push	{r4, r5, r6, lr}
 80034c4:	4c06      	ldr	r4, [pc, #24]	; (80034e0 <_sbrk_r+0x20>)
 80034c6:	0005      	movs	r5, r0
 80034c8:	0008      	movs	r0, r1
 80034ca:	6023      	str	r3, [r4, #0]
 80034cc:	f7fd fbec 	bl	8000ca8 <_sbrk>
 80034d0:	1c43      	adds	r3, r0, #1
 80034d2:	d103      	bne.n	80034dc <_sbrk_r+0x1c>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d000      	beq.n	80034dc <_sbrk_r+0x1c>
 80034da:	602b      	str	r3, [r5, #0]
 80034dc:	bd70      	pop	{r4, r5, r6, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	20000160 	.word	0x20000160

080034e4 <__malloc_lock>:
 80034e4:	4770      	bx	lr

080034e6 <__malloc_unlock>:
 80034e6:	4770      	bx	lr

080034e8 <_malloc_usable_size_r>:
 80034e8:	1f0b      	subs	r3, r1, #4
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	1f18      	subs	r0, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da01      	bge.n	80034f6 <_malloc_usable_size_r+0xe>
 80034f2:	580b      	ldr	r3, [r1, r0]
 80034f4:	18c0      	adds	r0, r0, r3
 80034f6:	4770      	bx	lr

080034f8 <_init>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr

08003504 <_fini>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr
